<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的MySQL</title>
      <link href="/2020/09/23/%E6%88%91%E7%9A%84MySQL/"/>
      <url>/2020/09/23/%E6%88%91%E7%9A%84MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h1><blockquote><p>1.查看当前所有的数据库<br>show databases ;<br>2.打开指定的库名<br>use 库名 ;<br>3.查看当前库的所有表<br>show tables ;<br>4.查看其它库的所有表<br>show tables from 库名 ;<br>5.创建表<br>create table 表名 (<br> 列名 列类型 ,<br> 列名 列类型,<br>………<br>) ;<br>7.查看表内容<br>select * from 表名*<br>6.查看表结构<br>desc 表名 ;<br>7.查看服务器的版本<br>方式一：登录到mysql服务端<br>select version() ;<br>方式二：没有登录到mysql服务端<br>mysql - -version<br>或<br>mysql - -v</p></blockquote><h1 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h1><blockquote><p>1.不区分大小写，但建议关键字大写，表名、列名小写<br>2.每条命令最好用分号结尾<br>3.每条命令根据需要，可以进行缩进或者换行<br>4.注释<br>单行注释1：#注释<br>单行注释2：- -  注释<br>多行注释：/* 注释 */</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进阶一：基础查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 查询列表 from 表名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">类似于：System.out.println(打印东西);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.查询列表可以是：表中的字段、常量值、表达式、函数</span></span><br><span class="line"><span class="comment">2.查询的结果是一个虚拟的表格</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> `<span class="title">employees</span>`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查询表中的单个字段</span></span><br><span class="line">SELECT last_name FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查询表中的多个字段</span></span><br><span class="line">SELECT last_name,salary,email FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询表中的所有字段</span></span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查询常量值</span></span><br><span class="line">SELECT <span class="number">100</span>;</span><br><span class="line">SELECT <span class="string">'john'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查询表达式</span></span><br><span class="line">SELECT <span class="number">100</span>*<span class="number">98</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询函数</span></span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.起别名</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1.便于理解</span></span><br><span class="line"><span class="comment">2如果要查询的字段有重名的情况，使用别名可以区分开来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line">SELECT <span class="number">100</span>%<span class="number">98</span> <span class="keyword">AS</span> 结果;</span><br><span class="line">SELECT last_name <span class="keyword">AS</span> 姓,first_name <span class="keyword">AS</span> 名 FROM employees;</span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：查询salary，显示结果为 out put</span></span><br><span class="line">SELECT salary <span class="keyword">AS</span> <span class="string">"out put"</span> FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：查询员工表中涉及到的所有部门编号</span></span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.+号的作用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的+号：</span></span><br><span class="line"><span class="comment">1.运算符，俩个操作数都为数值型</span></span><br><span class="line"><span class="comment">2.连接符，只要有一个操作数为字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mysql中的+号：</span></span><br><span class="line"><span class="comment">仅仅只有一个功能：运算符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select 100+90;俩个操作数都为数值型，则做加法运算</span></span><br><span class="line"><span class="comment">select '123'+90;只要其中一方为字符型，则试图将字符型数值转换成数值型</span></span><br><span class="line"><span class="comment">                                  如果转换成功，则继续做加法运算</span></span><br><span class="line"><span class="comment">select 'john'+90;                如果转换失败，则将字符型数值转换为0</span></span><br><span class="line"><span class="comment">select null+10;  只要其中一方为null，则结果肯定为null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 案例：查询员工名和姓连接成一个字段，并显示为 姓名</span></span><br><span class="line">SELECT CONCAT(last_name, first_name) <span class="keyword">AS</span> 姓名;</span><br><span class="line">SELECT CONCAT(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>) <span class="keyword">AS</span> 结果;</span><br><span class="line">SELECT CONCAT(<span class="string">'first_name'</span>,<span class="string">','</span><span class="string">'last_name'</span>,<span class="string">','</span><span class="string">'job_id'</span>,<span class="string">','</span>,IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">AS</span> <span class="string">"out put"</span> </span><br><span class="line">FROM </span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶二：条件查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 查询列表 from 表名</span></span><br><span class="line"><span class="comment">where 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">一：按条件表达式筛选</span></span><br><span class="line"><span class="comment">简单条件运算符：&gt; &lt; = != &lt;&gt; &gt;= &lt;=</span></span><br><span class="line"><span class="comment">二：按逻辑表达式筛选</span></span><br><span class="line"><span class="comment">逻辑运算符：</span></span><br><span class="line"><span class="comment">作用：用于连接条件表达式</span></span><br><span class="line"><span class="comment"> &amp;&amp;   ｜｜  !</span></span><br><span class="line"><span class="comment"> and  or      not</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> &amp;&amp;和and：俩个条件都为true，结果为true，反之为false</span></span><br><span class="line"><span class="comment"> ｜｜或or：只要有一个条件为true，结果就为true，反之为false</span></span><br><span class="line"><span class="comment"> !或not：如果连接的条件本身为false，结果为true，反之为false</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">三：模糊查询：</span></span><br><span class="line"><span class="comment">like     between and      in       is null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 一、按条件表达式筛选</span></span><br><span class="line"><span class="comment"># 案例一：查询工资大于12000的员工信息</span></span><br><span class="line">SELECT * FROM employees WHERE salary&gt;<span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二：查询部门编号不等于90号的员工名和部门编号</span></span><br><span class="line">SELECT last_name,department_id </span><br><span class="line">FROM empployees</span><br><span class="line">WHERE department_id&lt;&gt;<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、按逻辑表达式筛选</span></span><br><span class="line"><span class="comment"># 案例1:查询工资在10000到20000之间的员工名、工资以及奖金</span></span><br><span class="line">SELECT last_name,salary,commission_pct</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;=<span class="number">10000</span> <span class="keyword">AND</span> salary&lt;=<span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2:查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE NOT(department_id&gt;=<span class="number">90</span> <span class="keyword">AND</span> department_id&lt;=<span class="number">110</span>) <span class="keyword">OR</span> salary&gt;<span class="number">15000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三、模糊查询</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">like</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1一般和通配符搭配使用  </span></span><br><span class="line"><span class="comment">         通配符 % 任意多个字符，包含0个字符</span></span><br><span class="line"><span class="comment">        _ 任意单个字符</span></span><br><span class="line"><span class="comment">betwee and</span></span><br><span class="line"><span class="comment">in</span></span><br><span class="line"><span class="comment">is null ｜ is not null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例1:查询员工名中包含字符a的员工信息</span></span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE <span class="string">'%a%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2:查询员工名中第三个字符为e，第五个字符为a的员工名和工资</span></span><br><span class="line">SELECT last_name,salary FROM employees</span><br><span class="line">WHERE last_name LIKE <span class="string">'__n_l%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3:查询员工名中第二个字符为_的员工名</span></span><br><span class="line">SELECT last_name FROM employees</span><br><span class="line">WHERE last_name LIKE <span class="string">'_$_%'</span> ESCAPE <span class="string">'$'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. between and</span></span><br><span class="line"><span class="comment">/* 1.使用between and 可以提高语句的简洁度</span></span><br><span class="line"><span class="comment">2.包含临界值</span></span><br><span class="line"><span class="comment">3.俩个临界值不要调换顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例1:查询员工编号在100到120之间的员工信息</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE employee_id \&gt;= <span class="number">100</span> <span class="keyword">AND</span> employees_id \&lt;= <span class="number">120</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line">SELECT * FROM employees </span><br><span class="line">WHERE employee_id BETWEEN <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. in</span></span><br><span class="line"><span class="comment">/* 含义：判断某字段的值是否属于in列表中某一项</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1.使用in提高语句简洁度</span></span><br><span class="line"><span class="comment">2.in列表的值类型必须一致或兼容</span></span><br><span class="line"><span class="comment">3.不支持通配符查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 案例：查询员工的工种编号是 IT_PROG,AD_VP,AD_PRES中的一个员工名和工种编号</span></span><br><span class="line">SELECT last_name,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id IN(<span class="string">'IT_PROG'</span>,<span class="string">'AD_VP'</span>,<span class="string">'AD_PRES'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. is null</span></span><br><span class="line"><span class="comment">/* =或\&lt;\&gt;不能用于判断NULL值</span></span><br><span class="line"><span class="comment">is null或is not null可以判断null值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 案例1:查询没有奖金的员工名和奖金率</span></span><br><span class="line">SELECT last_name,commission_pct FROM employees</span><br><span class="line">WHERE commission_pct IS <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例1:查询有奖金的员工名和奖金率</span></span><br><span class="line">SELECT last_name,commission_pct FROM employees</span><br><span class="line">WHERE commission_pct IS NOT <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------以下为错误</span></span><br><span class="line">SELECT last_name,commission_pct FROM employees</span><br><span class="line">WHERE salary IS <span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.安全等于   \&lt;=\&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例1:查询没有奖金的员工名和奖金率</span></span><br><span class="line">SELECT last_name,commission_pct FROM employees</span><br><span class="line">WHERE commission_pct \&lt;=\&gt; <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2:查询工资为12000的员工信息</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary \&lt;=\&gt; <span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶3: 排序查询</span></span><br><span class="line"><span class="comment">/* 语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表</span></span><br><span class="line"><span class="comment">FROM 表</span></span><br><span class="line"><span class="comment">【WHERE 筛选条件】</span></span><br><span class="line"><span class="comment">ORDER BY 排序列表 【ASC｜DESC】</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1.ASC代表的是升序，DESC代表的是降序，如果不写，默认的是升序</span></span><br><span class="line"><span class="comment">2.ORDER BY 子句中可以支持单个字段、多个字段、表达式、函数、别名</span></span><br><span class="line"><span class="comment">3.ORDER BY 子句一般是放在查询语句的最后面，limit子句除外</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：查询员工信息，要求工资从高到低排序</span></span><br><span class="line">SELECT * FROM employees ORDER BY salary DESC;</span><br><span class="line">SELECT * FROM employees ORDER BY salary ASC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2:查询部门编号\&gt;=90的员工信息，按入职时间的先后进行排序</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE department_id \&gt;= <span class="number">90</span></span><br><span class="line">ORDER BY hiredata ASC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3:按年薪的高低显示员工的信息和年薪【按表达式排序】</span></span><br><span class="line">SELECT * , salary*<span class="number">12</span>*(<span class="number">1</span>+IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary*<span class="number">12</span>*(<span class="number">1</span>+IFNULL(commission_pct,<span class="number">0</span>)) DESC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3:按年薪的高低显示员工的信息和年薪【按别名排序】</span></span><br><span class="line">SELECT * , salary*<span class="number">12</span>*(<span class="number">1</span>+IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 DESC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例5:按姓名的长度显示员工的姓名和工资【按函数排序】</span></span><br><span class="line">SELECT LENGTH (last_name) <span class="keyword">AS</span> 字节长度,last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例6:查询员工信息，要求先按工资升序，再按员工编号降序【按多个字段排序】</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">ORDER BY salary ASC,employee_id DESC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习：</span></span><br><span class="line"><span class="comment"># 1.查询员工的姓名和部门号和年薪，按年薪排序，再按姓名升序</span></span><br><span class="line">SELECT last_name,department_id,salary*<span class="number">12</span>*(<span class="number">1</span>+IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 DESC,last_name ASC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.选择工资不在8000到17000的员工的姓名和工资，按工资降序</span></span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary NOT BETWEEN <span class="number">8000</span> <span class="keyword">AND</span> <span class="number">17000</span></span><br><span class="line">ORDER BY salary DESC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询邮箱中包含e的员工信息，并先按邮箱的字节数降序，再按部门号升序</span></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE email LIKE <span class="string">'%e%'</span></span><br><span class="line">ORDER BY LENGTH(email) DESC,department_id ASC;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶4:常见函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 概念：类似于Java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</span></span><br><span class="line"><span class="comment">好处：1.隐藏了实现细节 2.提高了代码的重用性</span></span><br><span class="line"><span class="comment">调用：SELECT 函数名(实参列表) 【FROM 表名】;</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1.叫什么（函数名）</span></span><br><span class="line"><span class="comment">2.干什么（函数功能）</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1.单行函数 </span></span><br><span class="line"><span class="comment">  如：CONCAT、LENGTH、IFNULL等</span></span><br><span class="line"><span class="comment">常见函数：</span></span><br><span class="line"><span class="comment">字符函数：length,concat,substr,instr,trim,upper,lower,lpad,rpad,replace</span></span><br><span class="line"><span class="comment">数学函数：</span></span><br><span class="line"><span class="comment">round,ceil,floor,truncate,mod</span></span><br><span class="line"><span class="comment">日期函数：</span></span><br><span class="line"><span class="comment">now,curdate,curtime,year,month,monthname,day,hour,minute,second,str_to_date,date_format</span></span><br><span class="line"><span class="comment">其它函数：</span></span><br><span class="line"><span class="comment">version,database,user</span></span><br><span class="line"><span class="comment">控制函数：</span></span><br><span class="line"><span class="comment">if,case</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.分组函数  </span></span><br><span class="line"><span class="comment">功能：做统计使用，又称为统计函数、聚合函数、组函数</span></span><br><span class="line"><span class="comment">分类：sum求和、avg平均值、max最大值、min最小值、count计算个数</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1.sum、avg一般用于处理数值型</span></span><br><span class="line"><span class="comment">  max、min、count可以处理任何类型</span></span><br><span class="line"><span class="comment">2.以上分组函数都忽略null值</span></span><br><span class="line"><span class="comment">3.可以和distinct搭配实现去重的运算</span></span><br><span class="line"><span class="comment">4.count函数的单独介绍</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 单行函数</span></span><br><span class="line"><span class="comment"># 一、字符函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.LENGTH  获取参数值的字节个数</span></span><br><span class="line">SELECT LENGTH(<span class="string">'join'</span>);</span><br><span class="line">SELECT LENGTH(<span class="string">'张三丰hhhh'</span>);</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">'%char%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.CONCAT  拼接字符串</span></span><br><span class="line">SELECT CONCAT(last_name,<span class="string">'_'</span>,first_name) <span class="keyword">AS</span> 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.UPPER、LOWER</span></span><br><span class="line">SELECT UPPER(<span class="string">'join'</span>);</span><br><span class="line">SELECT LOWER(<span class="string">'JOHN'</span>);</span><br><span class="line"><span class="comment"># 示例：将姓变大写，名变小写，然后拼接</span></span><br><span class="line">SELECT CONCAT(UPPER(<span class="string">'join'</span>),<span class="string">'_'</span>,LOWER(<span class="string">'DAR'</span>)) <span class="keyword">AS</span> 姓名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.SUBSTR、SUBSTRING</span></span><br><span class="line"><span class="comment">/* 注意：索引从1开始</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment"># 截取从指定索引处后面的所有字符</span></span><br><span class="line">SELECT SUBSTR(<span class="string">'李莫愁爱上了陆展元'</span>,<span class="number">7</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"><span class="comment"># 截取从指定索引处指定字符长度的字符</span></span><br><span class="line">SELECT SUBSTR(<span class="string">'李莫愁爱上了陆展元'</span>,<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：姓名中首字符大写，其它字符小写然后用_拼接，显示出来</span></span><br><span class="line">SELECT CONCAT(UPPER(SUBSTR(last_name,<span class="number">1</span>,<span class="number">1</span>)),<span class="string">'_'</span>,LOWER(SUBSTR(last_name,<span class="number">2</span>))) <span class="keyword">AS</span> out_put </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.INSTR 返回子串第一次出现的索引，如果找不到返回0</span></span><br><span class="line">SELECT INSTR(<span class="string">'杨不悔爱上了殷梨亭'</span>,<span class="string">'殷梨亭'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line">SELECT INSTR(<span class="string">'杨不悔爱上了殷梨亭'</span>,<span class="string">'殷梨亭1'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.TRIM</span></span><br><span class="line">SELECT TRIM(<span class="string">'    张翠三   '</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line">SELECT TRIM(<span class="string">'a'</span> FROM <span class="string">'aaaaaa张aa翠三aaaaaa'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.LPAD 用指定的字符实现左填充指定长度</span></span><br><span class="line">SELECT LPAD(<span class="string">'阴森森'</span>,<span class="number">10</span>,<span class="string">'*'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.RPAD 用指定的字符实现右填充指定长度</span></span><br><span class="line">SELECT RPAD(<span class="string">'阴森森'</span>,<span class="number">12</span>,<span class="string">'*'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.REPLACE  替换</span></span><br><span class="line">SELECT REPLACE(<span class="string">'张无忌爱上了周芷若'</span>,<span class="string">'周芷若'</span>,<span class="string">'赵敏'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、数学函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.ROUND 四舍五入</span></span><br><span class="line">SELECT ROUND(<span class="number">1.6555</span>);</span><br><span class="line">SELECT ROUND(<span class="number">1.2367</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.CEIL 向上取整,返回\&gt;=该参数的最小整数</span></span><br><span class="line">SELECT CEIL(<span class="number">-1.02</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.FLOOR 向下取整，返回\&lt;=该参数的最大整数</span></span><br><span class="line">SELECT FLOOR(<span class="number">-9.99</span>);</span><br><span class="line">SELECT FLOOR(<span class="number">9.99</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.TRUNCATE 截断</span></span><br><span class="line">SELECT TRUNCATE(<span class="number">1.6999</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.MOD 取余</span></span><br><span class="line"><span class="comment">/* mod(a,b) : a-a/b*b</span></span><br><span class="line"><span class="comment">mod(-10,-3) : -10-(-10)/(-3)*(-3) = -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SELECT MOD(<span class="number">10</span>,<span class="number">-3</span>);</span><br><span class="line">SELECT <span class="number">10</span>%<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三、日期函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.NOW 返回当前系统日期+时间</span></span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.CURDATE 返回当前的系统日期，不包括时间</span></span><br><span class="line">SELECT CURDATE();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.CURTIME 返回当前系统时间，不包括日期</span></span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.可以获取指定的部分，年、月、日、小时、分钟、秒</span></span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT MONTH(NOW());</span><br><span class="line">SELECT DAY(<span class="string">'2020-01-01'</span>) <span class="keyword">AS</span> 日;</span><br><span class="line">SELECT YEAR(hiredate) <span class="keyword">AS</span> 年 FROM employees;</span><br><span class="line">SELECT MONTHNAME(NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.STR_TO_DATE 将字符通过指定的格式转换为日期</span></span><br><span class="line">SELECT STR_TO_DATE(<span class="string">'4-4-2020'</span>,<span class="string">'%m-%d-%y'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"><span class="comment"># 案例：查询入职日期为1992-3-4的员工信息</span></span><br><span class="line">SELECT * FROM employees WHERE hiredate = STR_TO_DATE(<span class="string">'4-4-2020'</span>,<span class="string">'%c-%d-%y'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.DATE_FORMAT 将日期转换为字符</span></span><br><span class="line">SELECT DATE_FORMAT(NOW(),<span class="string">'%y年%m月%d日'</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"><span class="comment"># 案例：查询有奖金的员工名和入职日期（xx月/xx日 xx年）</span></span><br><span class="line">SELECT last_name,DATE_FORMAT(hiredate,<span class="string">'%m月/%d日 %y年'</span>)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四、其它函数</span></span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATEBASE();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 五、流程控制函数</span></span><br><span class="line"><span class="comment"># 1.IF函数  if else 的效果</span></span><br><span class="line">SELECT <span class="keyword">IF</span>(<span class="number">10</span>\&gt;<span class="number">5</span>,<span class="string">'Big'</span>,<span class="string">'Small'</span>);</span><br><span class="line"></span><br><span class="line">SELECT last_name,commission_pct,</span><br><span class="line"><span class="keyword">IF</span>(commission_pct IS <span class="keyword">NULL</span>,<span class="string">'没奖金'</span><span class="string">','</span><span class="string">'有奖金'</span>) <span class="keyword">AS</span> 备注</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.CASE函数的使用一： switch case 的效果</span></span><br><span class="line"><span class="comment">/* switch(变量或者表达式)</span></span><br><span class="line"><span class="comment">case 常量1:语句1;break;</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">default:语句n；break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mysql中：</span></span><br><span class="line"><span class="comment">case 要判断的字段或表达式   </span></span><br><span class="line"><span class="comment">when 常量1 then 要显示的值1或语句1; 如果显示的是值不用写分号</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">else 要显示的值n或语句n;</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 案例：查询员工的工资，要求：部门号=30，显示的工资为1.1倍；</span></span><br><span class="line"><span class="comment">   部门号=40，显示的工资为1.2倍；</span></span><br><span class="line"><span class="comment">   部门号=50，显示的工资为1.3倍；</span></span><br><span class="line"><span class="comment">   其它部门，显示的工资为原工资</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SELECT salary <span class="keyword">AS</span> 原始工资,department_id,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line">WHEN <span class="number">30</span> THEN salary*<span class="number">1.1</span></span><br><span class="line">WHEN <span class="number">40</span> THEN salary*<span class="number">1.2</span></span><br><span class="line">WHEN <span class="number">50</span> THEN salary*<span class="number">1.3</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line">END <span class="keyword">AS</span> 新工资</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.CASE函数的使用二： 类似于多重if</span></span><br><span class="line"><span class="comment">/* Java中：</span></span><br><span class="line"><span class="comment">if(条件1)</span></span><br><span class="line"><span class="comment">语句1;</span></span><br><span class="line"><span class="comment">&#125;else if(条件2)</span></span><br><span class="line"><span class="comment">语句2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">语句n;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mysql中：</span></span><br><span class="line"><span class="comment">case</span></span><br><span class="line"><span class="comment">when 条件1 then 要显示的值1或语句1;  值不用写分号</span></span><br><span class="line"><span class="comment">when 条件2 then 要显示的值2或语句2;</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">else 要显示的值n或语句n;</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 案例：查询员工的工资的情况，要求：</span></span><br><span class="line"><span class="comment">如果工资\&gt;20000,显示A级别</span></span><br><span class="line"><span class="comment">如果工资\&gt;15000，显示B级别</span></span><br><span class="line"><span class="comment">如果工资\&gt;10000,显示C级别</span></span><br><span class="line"><span class="comment">否则，显示D级别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SELECT salary,</span><br><span class="line">WHEN salary\&gt;<span class="number">20000</span> THEN <span class="string">'A'</span></span><br><span class="line">WHEN salary\&gt;<span class="number">15000</span> THEN <span class="string">'B'</span></span><br><span class="line">WHEN salary\&gt;<span class="number">10000</span> THEN <span class="string">'C'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'D'</span></span><br><span class="line">END <span class="keyword">AS</span> 工资级别</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.分组函数</span></span><br><span class="line"><span class="comment"># 1.简单的使用</span></span><br><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT MIN(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) <span class="keyword">AS</span> 和,AVG(salary) <span class="keyword">AS</span> 平均 FROM employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.参数支持哪些类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.是否忽略null值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.和distinct搭配</span></span><br><span class="line">SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;</span><br><span class="line">SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;</span><br><span class="line"><span class="number">56</span></span><br></pre></td></tr></table></figure><h1 id="PHP-MySQL连接"><a href="#PHP-MySQL连接" class="headerlink" title="PHP MySQL连接"></a>PHP MySQL连接</h1><blockquote><p>实例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ps:-&gt;前面的变量是一个对象，例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;friends_count</span><br></pre></td></tr></table></figure><p>指取对象的friends_count属性_</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t-&gt;homeTimeline(p)</span><br></pre></td></tr></table></figure><p>指调用对象的homeTimeline方法，方法中传入一个参数$p</p></blockquote><h1 id="PHP-MySQL关闭连接"><a href="#PHP-MySQL关闭连接" class="headerlink" title="PHP MySQL关闭连接"></a>PHP MySQL关闭连接</h1><blockquote><p>连接在脚本执行完毕后会自动关闭。我们也可以使用下列代码来进行关闭连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn-&gt;close();</span><br></pre></td></tr></table></figure></blockquote><h1 id="PHP-MySQL创建数据库"><a href="#PHP-MySQL创建数据库" class="headerlink" title="PHP MySQL创建数据库"></a>PHP MySQL创建数据库</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line">$sql = <span class="string">"CREATE DARABASE myDB"</span>;</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"数据库创建成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error creating database:"</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close(); <span class="comment">//关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="PHP-创建MySQL表"><a href="#PHP-创建MySQL表" class="headerlink" title="PHP 创建MySQL表"></a>PHP 创建MySQL表</h1><blockquote><p>一个数据表有一个唯一名称，并有行和列组成。<br>CREATE TABLE 语句用于创建MySQL表，<br>创建表前，我们需要使用 use dbname 来选择要操作的数据库：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">myDB</span>;</span><br></pre></td></tr></table></figure><p>我们将创建一个名为 “MyGuests” 的表，有 5 个列： “id”, “firstname”, “lastname”, “email” 和 “reg_date”:_</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE MyGuests (</span><br><span class="line">    id INT(<span class="number">6</span>) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    firstname VARCHAR(<span class="number">30</span>) NOT <span class="keyword">NULL</span>,</span><br><span class="line">    lastname VARCHAR(<span class="number">30</span>) NOT <span class="keyword">NULL</span>,</span><br><span class="line">    email VARCHAR(<span class="number">50</span>),</span><br><span class="line">    reg_date TIMESTAMP</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上表中的注意事项：<br>数据类型指定列可以储存什么类型的数据。<br>在设置了数据类型后，我们可以为每个列指定其他选项的属性：</p><ol><li>NOT NULL - 每一行都必须含有值（不能为空），null 值是不允许的。</li><li>DEFAULT value - 设置默认值</li><li>UNSIGNED - 使用无符号数值类型，0 及正数</li><li>AUTO INCREMENT - 设置 MySQL 字段的值在新增记录时每次自动增长 1</li><li>PRIMARY KEY - 设置数据表中每条记录的唯一标识。 通常列的 PRIMARY KEY 设置为 ID 数值，与 AUTO_INCREMENT 一起使用。 _<br>每个表都应该有一个主键（本列为“id”列），主键必须包含唯一的值。<br>以下示例展示了如何在PHP中创建表：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line">$dbname = <span class="string">"dbname"</span>; <span class="comment">//myDB </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password, $dbname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 sql 创建数据表</span></span><br><span class="line">$sql = <span class="string">"CREATE TABLE MyGuests (</span></span><br><span class="line"><span class="string">    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    firstname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">    lastname VARCHAR(30) NOT NULL,0</span></span><br><span class="line"><span class="string">    email VARCHAR(50),</span></span><br><span class="line"><span class="string">    reg_date TIMESTAMP</span></span><br><span class="line"><span class="string">)"</span>;</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Table MyGuests created successfully"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"创建数据表错误:"</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="PHP-MySQL插入数据"><a href="#PHP-MySQL插入数据" class="headerlink" title="PHP MySQL插入数据"></a>PHP MySQL插入数据</h1><blockquote><p>在创建完数据库和表后，我们可以向表中添加数据。<br>以下为一些语法规则：<br>1.PHP 中 SQL 查询语句必须使用引号<br>2.在 SQL 查询语句中的字符串值必须加引号<br>3.数值的值不需要引号<br>4.NULL 值不需要引号<br>INSERT INTO 语句通常用于向 MySQL 表添加新的记录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, column3,...)</span><br><span class="line">VALUES (value1, value2, value3,...)</span><br></pre></td></tr></table></figure><p>ps:<br> 如果列设置 AUTO_INCREMENT (如 “id” 列) 或 TIMESTAMP (如 “reg_date” 列),，我们就不需要在 SQL 查询语句中指定值； MySQL 会自动为该列添加值。<br>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line">$dbname = <span class="string">"dbname"</span>;   <span class="comment">//myDB</span></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password, $dbname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Join', 'Doe', 'join$example.com')"</span>;</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新纪录插入成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error:"</span> . $sql . <span class="string">"&lt;br&gt;"</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="PHP-MySQL-插入多条数据"><a href="#PHP-MySQL-插入多条数据" class="headerlink" title="PHP MySQL 插入多条数据"></a>PHP MySQL 插入多条数据</h1><blockquote><p>mysqli_multi_query() 函数可用来执行多条SQL语句。以下实例向 “MyGuests” 表添加了三条新的记录:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line">$dbname = <span class="string">"dbname"</span>; <span class="comment">//myDB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password , $dbname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入多条数据</span></span><br><span class="line">$sql = <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Join', 'Doe', 'join@example.com');"</span>;</span><br><span class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Mary', 'Moe', 'mary@example.com');"</span>;</span><br><span class="line">$sql .= <span class="string">"INSERT INTO MyGuests (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES ('Julie', 'Dooley', 'julie@example.com');"</span>;<span class="comment">//注意分号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;multi_query($sql) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close(); <span class="comment">//关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="PHP-MySQL-预处理语句"><a href="#PHP-MySQL-预处理语句" class="headerlink" title="PHP MySQL 预处理语句"></a>PHP MySQL 预处理语句</h1><blockquote><p>预处理语句用于执行多个相同的SQL语句，并且执行效率更高。预处理语句的工作原理如下：<br>1.预处理：创建SQL语句模版并发送到数据库。预留的值使用参数“?”标记。例如：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</span><br></pre></td></tr></table></figure><blockquote><p>2.数据库解析，编译，对SQL语句模版执行查询优化，并储存结果不输出。<br>3.执行：最后，将应用绑定的值传递给参数(“?”标记)，数据库执行语句。应用可以多次执行语句，如果参数的值不一样。<br>示例：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line">$dbname = <span class="string">"dbname"</span>; <span class="comment">//myDB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预处理及绑定</span></span><br><span class="line">$stmt = $conn-&gt;prepare(<span class="string">"INSERT INTO MyGuests (firstname, lastname, email) </span></span><br><span class="line"><span class="string">VALUES (?, ?, ?)"</span>);</span><br><span class="line">$stmt-&gt;bind_param(<span class="string">"sss"</span>, $firstname, $lastname, $email);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置参数并执行</span></span><br><span class="line">$firstname = <span class="string">"Join"</span>;</span><br><span class="line">$lastname = <span class="string">"Doe"</span>;</span><br><span class="line">$email = <span class="string">"join@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">$firstname = <span class="string">"Mary"</span>;</span><br><span class="line">$lastname = <span class="string">"Moe"</span>;</span><br><span class="line">$email = <span class="string">"mary@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">$firstname = <span class="string">"Julie"</span>;</span><br><span class="line">$lastname = <span class="string">"Dooley"</span>;</span><br><span class="line">$email = <span class="string">"julie@example.com"</span>;</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"新记录插入成功"</span>;</span><br><span class="line"></span><br><span class="line">$stmt-&gt;close();</span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>解析以下示例的每行代码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)"</span></span><br></pre></td></tr></table></figure><blockquote><p>我们使用了？问号。在此我们可以将问号替换为整型，字符串，双精度浮点型和布尔值。<br>接下来我们看一下bind_param()函数：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$stmt-&gt;bind_param(<span class="string">"sss"</span>, $firstname, $lastname, $email);</span><br></pre></td></tr></table></figure><blockquote><p>该函数绑定了SQL的参数，且告诉数据库参数的值。”SSS”参数列处理其余参数的数据类型。S字符告诉数据库该参数为字符串。<br>参数有一下四种类型：<br>1.i - integer （整型）<br>2.d - double （双精度浮点型）<br>3.s - string    （字符串）<br>4.b - BLOB （binary large object二进制大对象）<br>每个参数都需要指定类型。</p></blockquote><h1 id="PHP-MySQL-读取数据"><a href="#PHP-MySQL-读取数据" class="headerlink" title="PHP MySQL 读取数据"></a>PHP MySQL 读取数据</h1><blockquote><p>SELECT 语句用于从数据表中读取数据：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name</span><br></pre></td></tr></table></figure><blockquote><p>我们可以使用 * 号来读取所有数据表中的字段:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name</span><br></pre></td></tr></table></figure><blockquote><p>示例：我们从 myDB 数据库的 MyGuests 表读取了 id, firstname 和 lastname 列的数据并显示在页面上.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$severname = <span class="string">"localhost"</span>; <span class="comment">//127.0.0.1</span></span><br><span class="line">$username = <span class="string">"username"</span>;  <span class="comment">//root</span></span><br><span class="line">$password = <span class="string">"password"</span>;  <span class="comment">//30521700</span></span><br><span class="line">$dbname = <span class="string">"dbname"</span>; <span class="comment">//myDB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($severname, $username , $password , $dbname);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败："</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询数据库数据</span></span><br><span class="line">$sql = <span class="string">"SELECT id, firstname, lastname FROM MyGuests"</span>;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//输出数据</span></span><br><span class="line">    <span class="keyword">while</span>($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"firstname"</span>]. <span class="string">" "</span> . $row[<span class="string">"lastname"</span>]. <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Nothing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close(); <span class="comment">//关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码解析如下:<br>首先，我们设置了 SQL 语句从 MyGuests数据表中读取 id, firstname 和 lastname 三个字段。之后我们使用该 SQL 语句从数据库中取出结果集并赋给复制给变量 $result。函数 num_rows() 判断返回的数据。如果返回的是多条数据，函数 fetch_assoc() 将结合集放入到关联数组并循环输出。 while() 循环出结果集，并输出 id, firstname 和 lastname 三个字段值。</p></blockquote><h1 id="PHP-MySQL-Where-子句"><a href="#PHP-MySQL-Where-子句" class="headerlink" title="PHP MySQL Where 子句"></a>PHP MySQL Where 子句</h1><blockquote><p>WHERE 子句用于过滤记录。WHERE子句用于提取满足指定标准的记录。它的语法为:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br></pre></td></tr></table></figure><blockquote><p>为了让PHP执行上面的语句，我们可以使用mysql_query()函数。该函数用于向MySQL连接发送查询或命令。<br>示例：下面的示例将从“Persons”表中选取所有FirstName=‘Peter’的行：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败："</span> . mysqli_connect_errno();</span><br><span class="line">&#125; <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line">$result = mysqli_query($con,<span class="string">"SELECT * FROM Persons WHERE FirstName='Peter'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $row[<span class="string">'FirstName'</span>] . <span class="string">" "</span> . $row[<span class="string">'LastName'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码将输出：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Peter Giif</span><br></pre></td></tr></table></figure><h2 id="ps-PHP-mysqli-fetch-array-函数"><a href="#ps-PHP-mysqli-fetch-array-函数" class="headerlink" title="ps:   PHP mysqli_fetch_array() 函数"></a>ps:   PHP mysqli_fetch_array() 函数</h2><blockquote><p>从结果集中取得一行作为数字数组或关联数组：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//假定数据库用户名：root，密码：123456，数据库：RUNOOB</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"RUNOOB"</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno($con))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接MySQL失败："</span> . mysqli_connect_error();</span><br><span class="line">&#125; <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"SELECT name,url FROM websites ORDER BY alexa"</span>;</span><br><span class="line">$result=mysqli_query($con,$sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字数组</span></span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_NUM);</span><br><span class="line">printf (<span class="string">"%s : %s"</span>,$row[<span class="number">0</span>],$row[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关联数组</span></span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line">printf (<span class="string">"%s : %s"</span>,$row[<span class="string">"name"</span>],$row[<span class="string">"url"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放结果集</span></span><br><span class="line">mysqli_free_result($result);</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/10/04/0G9E6g.png"  alt></p><h1 id="PHP-MySQL-Order-By-关键词"><a href="#PHP-MySQL-Order-By-关键词" class="headerlink" title="PHP MySQL Order By 关键词"></a>PHP MySQL Order By 关键词</h1><blockquote><p>ORDER BY 关键词用于对记录集中的数据进行排序。ORDER BY 关键词默认对记录进行升序排序。如果你想降序排序，请使用 DESC 关键字。<br>语法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column_name(s) ASC|DESC</span><br></pre></td></tr></table></figure><blockquote><p>示例：下面将选取“Persons”表中存储的所有数据，并根据“Age”列对结果进行排序：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败："</span> . mysqli_connect_errno();</span><br><span class="line">&#125; <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ORDER BY 关键词用于对记录集中的数据进行排序。</span></span><br><span class="line">$result = mysqli_query($con,<span class="string">"SELECT * FROM Persons ORDER BY age "</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">ORDER BY 关键词用于对记录集中的数据进行排序。</span></span><br><span class="line"><span class="comment">ORDER BY 关键词默认对记录进行升序排序。</span></span><br><span class="line"><span class="comment">如果你想降序排序，请使用 DESC 关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>($row = mysqli_fetch_array($result))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> $row[<span class="string">'FirstName'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" "</span> . $row[<span class="string">'LastName'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">" "</span> . $row[<span class="string">'Age'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果输出为：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Geleen Quss <span class="number">33</span></span><br><span class="line">Peter Giin <span class="number">35</span></span><br></pre></td></tr></table></figure><h2 id="根据两列进行排序"><a href="#根据两列进行排序" class="headerlink" title="根据两列进行排序"></a>根据两列进行排序</h2><blockquote><p>当按照多个列进行排序时，只有第一列的值相同时才使用第二列：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column1,column2</span><br></pre></td></tr></table></figure><h1 id="PHP-MySQL-Update"><a href="#PHP-MySQL-Update" class="headerlink" title="PHP MySQL Update"></a>PHP MySQL Update</h1><blockquote><p>UPDATE 语句用于更新数据库表中已存在的记录。<br>语法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1=value, column2=value2,.....</span><br><span class="line">WHERE some_column=some_value</span><br></pre></td></tr></table></figure><blockquote><p>WHERE 子句规定了哪些记录需要更新。如果你不写这个，那么所有的记录都会被更新！为了让PHP执行上面的语句，我们要使用mysql_query()函数。<br>示例：在前面我们已经创建了一个名叫“Persons”的表，如下所示：<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/10/04/0GiD3V.png"  alt><br>我们将更新“Persons”表的一些数据：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败："</span> . mysqli_connect_errno();</span><br><span class="line">&#125; <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE 语句用于更新数据库表中已存在的记录。</span></span><br><span class="line">mysqli_query($con,<span class="string">"UPDATE Persons SET Age=36</span></span><br><span class="line"><span class="string">WHERE FirstName='Peter' AND LastName='Griffin'"</span>);</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更新后的“Persons”表如下：<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/10/04/0Gi536.png"  alt></p></blockquote><h1 id="PHP-MySQL-Delete"><a href="#PHP-MySQL-Delete" class="headerlink" title="PHP MySQL Delete"></a>PHP MySQL Delete</h1><blockquote><p>DELETE FROM 语句用于从数据库表中删除记录。<br>语法：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE some_column = some_value</span><br></pre></td></tr></table></figure><blockquote><p>WHERE 子句规定了哪些记录需要删除。如果你不写这个，那么所有的记录都会被删除！为了让PHP执行上面的语句，我们要使用mysql_query()函数。<br>请看下面的“Persons”表：<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/10/04/0Gi536.png"  alt><br>下面的示例删除“Persons”表中所有LastName=‘Griffin’的记录：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"database"</span>);</span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接失败："</span> . mysqli_connect_errno();</span><br><span class="line">&#125; <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span><br><span class="line"></span><br><span class="line">mysqli_query($con,<span class="string">"DELETE FROM Persons WHERE LastName='Griffin'"</span>);</span><br><span class="line"></span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>删除后，表变成如下：<br><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/10/04/0GERsK.png"  alt></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快速入门数据结构与算法</title>
      <link href="/2020/08/25/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/25/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在是2020.08.25晚上八点零九分，七夕，人家和对象唧唧歪歪，臭屌丝在给数据们排号😭！！！<br><img src="/" class="lazyload" data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1598367400682&di=c65ab032847b52f710180526e218bc39&imgtype=0&src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F7e1e76c24f94a53bea3feea09afabd8842ae719d.jpg"  alt></p></blockquote><h1 id="快速入门数据结构与算法"><a href="#快速入门数据结构与算法" class="headerlink" title="快速入门数据结构与算法"></a>快速入门数据结构与算法</h1><blockquote><p>简介<br>有哪些常见的数据结构？基本操作是什么？常见的排序算法是如何实现的？各有什么优缺点？<br>本文主要分享算法基础、常见的数据结构以及排序算法。<br>本文代码均为C。<br><img src="/" class="lazyload" data-src="https://static001.geekbang.org/resource/image/73/9f/731fdcdef7b7d56ce7a6e0bf88a1a99f.jpg"  alt="数据结构与算法"></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要学习算法与数据结构？"><a href="#为什么要学习算法与数据结构？" class="headerlink" title="为什么要学习算法与数据结构？"></a>为什么要学习算法与数据结构？</h2><h3 id="解决特定问题。"><a href="#解决特定问题。" class="headerlink" title="解决特定问题。"></a>解决特定问题。</h3><h3 id="深度优化程序性能的基础。"><a href="#深度优化程序性能的基础。" class="headerlink" title="深度优化程序性能的基础。"></a>深度优化程序性能的基础。</h3><h3 id="学习一种思想：如何把现实问题转化为计算机语言表示。"><a href="#学习一种思想：如何把现实问题转化为计算机语言表示。" class="headerlink" title="学习一种思想：如何把现实问题转化为计算机语言表示。"></a>学习一种思想：如何把现实问题转化为计算机语言表示。</h3><h2 id="业务开发要掌握到的程度？"><a href="#业务开发要掌握到的程度？" class="headerlink" title="业务开发要掌握到的程度？"></a>业务开发要掌握到的程度？</h2><h3 id="了解常见的数据结构与算法，沟通没有障碍。"><a href="#了解常见的数据结构与算法，沟通没有障碍。" class="headerlink" title="了解常见的数据结构与算法，沟通没有障碍。"></a>了解常见的数据结构与算法，沟通没有障碍。</h3><h3 id="活学活用：遇到问题时知道要用什么数据结构与算法去优化。"><a href="#活学活用：遇到问题时知道要用什么数据结构与算法去优化。" class="headerlink" title="活学活用：遇到问题时知道要用什么数据结构与算法去优化。"></a>活学活用：遇到问题时知道要用什么数据结构与算法去优化。</h3><h1 id="数据结构基础"><a href="#数据结构基础" class="headerlink" title="数据结构基础"></a>数据结构基础</h1><h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><blockquote><p>数据结构是数据的组织、管理和存储格式，其使用目的是为了高效的访问和修改数据。<br>数据结构是算法的基石。如果把算法比喻成美丽灵动的舞者，那么数据结构就是舞者脚下广阔而坚实的舞台。</p></blockquote><h2 id="物理结构和逻辑结构的区别？"><a href="#物理结构和逻辑结构的区别？" class="headerlink" title="物理结构和逻辑结构的区别？"></a>物理结构和逻辑结构的区别？</h2><blockquote><p>物理结构就像是人的血肉和骨骼，看得见，摸得着，实实在在，如数组、链表。<br>逻辑结构就像人的思想和精神，它们看不见，摸不着，如队列、栈、树、图。</p></blockquote><h2 id="线性存储结构和非线性存储结构的区别？"><a href="#线性存储结构和非线性存储结构的区别？" class="headerlink" title="线性存储结构和非线性存储结构的区别？"></a>线性存储结构和非线性存储结构的区别？</h2><blockquote><p>线性：元素之间的关系是一对一的，如栈、队列。<br>非线性：每个元素可能连接0或多个元素，如树、图。</p></blockquote><h1 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h1><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><blockquote><p>数学：算法是用于解决某一类问题的公式和思想。<br>计算机：一系列程序指令，用于解决特定的运算和逻辑问题。</p></blockquote><h2 id="如何衡量算法好坏？"><a href="#如何衡量算法好坏？" class="headerlink" title="如何衡量算法好坏？"></a>如何衡量算法好坏？</h2><blockquote><p>时间复杂度：运行时间长短。<br>空间复杂度：占用内存大小。</p></blockquote><h2 id="怎么计算时间复杂度？"><a href="#怎么计算时间复杂度？" class="headerlink" title="怎么计算时间复杂度？"></a>怎么计算时间复杂度？</h2><blockquote><p>大O表示法（渐进时间复杂度）：把程序的相对执行时间函数T(n)简化为一个数量级，这个数量级可以是n、n^2、logN等。<br>推导时间复杂度的几个原则：<br>1.如果运行时间是常数量级，则用常数1表示。<br>2.只保留时间函数中的最高阶项。<br>3.如果最高阶项存在，则省去最高项前面的系数。<br>时间复杂度对比：O(1) &gt; O(logn) &gt; O(n) &gt; O(nlogn) &gt; O(n^2)。<br>不同时间复杂度算法运行次数对比：<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYzcyNzJmZGJiZmQwNGIxMGE2NGUzZWM2NGVkMmFjYTcucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h2 id="怎么计算空间复杂度？"><a href="#怎么计算空间复杂度？" class="headerlink" title="怎么计算空间复杂度？"></a>怎么计算空间复杂度？</h2><blockquote><p>常量空间O(1)：存储空间大小固定，和输入规模没有直接的关系。<br>线性空间O(n)：分配的空间是一个线性的集合，并且集合大小和输入规模n成正比。<br>二维空间O(n^2)：分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比。<br>递归空间O(logn)：递归是一个比较特殊的场景。虽然递归代码中并没有显式的声明变量或集合，但是计算机在执行程序时，会专门分配一块内存空间，用来存储“方法调用栈”。执行递归操作所需要的内存空间和递归的深度成正比。</p></blockquote><h2 id="如何定义算法稳定性？"><a href="#如何定义算法稳定性？" class="headerlink" title="如何定义算法稳定性？"></a>如何定义算法稳定性？</h2><blockquote><p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。<br>不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面。</p></blockquote><h2 id="有哪些常见的算法？"><a href="#有哪些常见的算法？" class="headerlink" title="有哪些常见的算法？"></a>有哪些常见的算法？</h2><blockquote><p>首先要明确：特定算法解决特定问题。</p></blockquote><h3 id="字符串：暴力匹配、BM、KMP、Trie等。"><a href="#字符串：暴力匹配、BM、KMP、Trie等。" class="headerlink" title="字符串：暴力匹配、BM、KMP、Trie等。"></a>字符串：暴力匹配、BM、KMP、Trie等。</h3><h3 id="查找：二分查找、遍历查找等。"><a href="#查找：二分查找、遍历查找等。" class="headerlink" title="查找：二分查找、遍历查找等。"></a>查找：二分查找、遍历查找等。</h3><h3 id="排序：冒泡排序、快速排序、计数排序、堆排序等。"><a href="#排序：冒泡排序、快速排序、计数排序、堆排序等。" class="headerlink" title="排序：冒泡排序、快速排序、计数排序、堆排序等。"></a>排序：冒泡排序、快速排序、计数排序、堆排序等。</h3><h3 id="搜索：TFIDF、PageRank等。"><a href="#搜索：TFIDF、PageRank等。" class="headerlink" title="搜索：TFIDF、PageRank等。"></a>搜索：TFIDF、PageRank等。</h3><h3 id="聚类分析：期望最大化、K-meanings、k-位数等。"><a href="#聚类分析：期望最大化、K-meanings、k-位数等。" class="headerlink" title="聚类分析：期望最大化、K-meanings、k-位数等。"></a>聚类分析：期望最大化、K-meanings、k-位数等。</h3><h3 id="深度学习：深度信念网络、深度卷积神经网络、生成式对抗等。"><a href="#深度学习：深度信念网络、深度卷积神经网络、生成式对抗等。" class="headerlink" title="深度学习：深度信念网络、深度卷积神经网络、生成式对抗等。"></a>深度学习：深度信念网络、深度卷积神经网络、生成式对抗等。</h3><h3 id="异常检测：k最近邻、局部异常因子等。"><a href="#异常检测：k最近邻、局部异常因子等。" class="headerlink" title="异常检测：k最近邻、局部异常因子等。"></a>异常检测：k最近邻、局部异常因子等。</h3><h3 id="……"><a href="#……" class="headerlink" title="……"></a>……</h3><blockquote><p>其中，字符串、查找、排序算法是最基础的算法。</p></blockquote><h1 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="什么是数组？"><a href="#什么是数组？" class="headerlink" title="什么是数组？"></a>什么是数组？</h3><blockquote><p>数组是有限个相同类型的变量所组成的有序集合。数组中的每一个变量被称为元素。<br><img src="/" class="lazyload" data-src="https://img2018.cnblogs.com/blog/736399/201909/736399-20190911145040072-2122797973.png"  alt="数组"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      a[i]=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">6</span>;j++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的基本操作？"><a href="#数组的基本操作？" class="headerlink" title="数组的基本操作？"></a>数组的基本操作？</h3><blockquote><p>读取O(1)、更新O(1)、插入O(n)、删除O(n)、扩容O(n)。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///数组插入操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入所要插入的数:"</span>);     <span class="comment">//前面排序是从大到小的排序</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;info);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(info&gt;a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=X<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">a[i]=info;</span><br><span class="line"><span class="keyword">if</span>(i&gt;(X<span class="number">-1</span>))               <span class="comment">//对特殊情况考虑</span></span><br><span class="line">a[<span class="number">9</span>]=info;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i]=info;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///数组删除操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入所要删除的数:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;info);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(info==a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(info==a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;X<span class="number">-1</span>;j++)</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[X<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;X;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="什么是链表？"><a href="#什么是链表？" class="headerlink" title="什么是链表？"></a>什么是链表？</h3><blockquote><p>链表是一种在物理上非连续、非顺序的数据结构，由若干个节点组成。<br>单向链表每一个节点又包含俩部分，一部分是存放数据的变量data，另一部分是指向下一个节点的指针next。<br><img src="/" class="lazyload" data-src="https://www.cxyxiaowu.com/wp-content/uploads/2019/10/1571058214-ef5baeb53bd498d.jpg"  alt="链表"></p></blockquote><h3 id="链表的基本操作？"><a href="#链表的基本操作？" class="headerlink" title="链表的基本操作？"></a>链表的基本操作？</h3><blockquote><p>读取O(n)、更新O(1)、插入O(1)、删除O(1)。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义链表节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;NODE, * PNODE;  <span class="comment">//NODE等价于struct Node, PNODE等价于struct Node *</span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function">PNODE <span class="title">createLinkList</span><span class="params">(<span class="keyword">void</span>)</span></span>;    <span class="comment">//创建链表的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseLinkList</span><span class="params">(PNODE pHead)</span></span>;   <span class="comment">//遍历链表的函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PNODE pHead)</span></span>;    <span class="comment">//判断链表是否为空的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(PNODE pHead)</span></span>;    <span class="comment">//获取链表长度的函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElement</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span>; <span class="comment">//向链表中插入元素的函数，三个参数依次为链表头结点、要插入元素的位置和要插入元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteElement</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> * pVal)</span></span>; <span class="comment">//从链表中删除元素的函数，三个参数依次为链表头结点、要删除的元素的位置和删除的元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(PNODE pHead)</span></span>;     <span class="comment">//对链表中的元素进行排序的函数(基于冒泡排序)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> val;   <span class="comment">//用于保存删除的元素</span></span><br><span class="line"> PNODE pHead = <span class="literal">NULL</span>;  <span class="comment">//PNODE等价于struct Node *</span></span><br><span class="line"> pHead = createLinkList(); <span class="comment">//创建一个非循环单链表，并将该链表的头结点地址赋给pHead</span></span><br><span class="line"> traverseLinkList(pHead); <span class="comment">//调用遍历链表的函数</span></span><br><span class="line"> <span class="keyword">if</span>(isEmpty(pHead))</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"链表为空！\n"</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"链表不为空！\n"</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"链表的长度为：%d\n"</span>, getLength(pHead));</span><br><span class="line"> <span class="comment">//调用冒泡排序函数</span></span><br><span class="line"> sort(pHead);</span><br><span class="line"> <span class="comment">//重新遍历</span></span><br><span class="line"> traverseLinkList(pHead);</span><br><span class="line"> <span class="comment">//向链表中指定位置处插入一个元素</span></span><br><span class="line"> <span class="keyword">if</span>(insertElement(pHead, <span class="number">4</span>, <span class="number">30</span>))</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"插入成功!插入的元素为：%d\n"</span>, <span class="number">30</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line"> <span class="comment">//重新遍历链表</span></span><br><span class="line"> traverseLinkList(pHead);</span><br><span class="line"> <span class="comment">//删除元素测试</span></span><br><span class="line"> <span class="keyword">if</span>(deleteElement(pHead, <span class="number">3</span>, &amp;val))</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"元素删除成功!删除的元素是：%d\n"</span>, val);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"元素删除失败!\n"</span>);</span><br><span class="line"> traverseLinkList(pHead);</span><br><span class="line"> system(<span class="string">"pause"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNODE <span class="title">createLinkList</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> length; <span class="comment">//有效结点的长度</span></span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line"> <span class="keyword">int</span> value; <span class="comment">//用来存放用户输入的结点的值</span></span><br><span class="line"> <span class="comment">//创建了一个不存放有效数据的头结点</span></span><br><span class="line"> PNODE pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"内存分配失败，程序退出！\n"</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> PNODE pTail = pHead; <span class="comment">//pTail始终指向尾结点</span></span><br><span class="line"> pTail-&gt;pNext = <span class="literal">NULL</span>; <span class="comment">//清空指针域</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请输入您想要创建链表结点的个数：len = "</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;length);</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请输入第%d个结点的值："</span>, i+<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value);</span><br><span class="line"> PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"内存分配失败，程序退出！\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> pNew-&gt;data = value; <span class="comment">//向新结点中放入值</span></span><br><span class="line"> pTail-&gt;pNext = pNew; <span class="comment">//将尾结点指向新结点</span></span><br><span class="line"> pNew-&gt;pNext = <span class="literal">NULL</span>; <span class="comment">//将新结点的指针域清空</span></span><br><span class="line"> pTail = pNew;  <span class="comment">//将新结点赋给pTail,使pTail始终指向为尾结点</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseLinkList</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> PNODE p = pHead-&gt;pNext;</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">NULL</span> != p)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</span><br><span class="line"> p = p-&gt;pNext;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span> == pHead-&gt;pNext)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> PNODE p = pHead-&gt;pNext;  <span class="comment">//指向首节点</span></span><br><span class="line"> <span class="keyword">int</span> len = <span class="number">0</span>;   <span class="comment">//记录链表长度的变量</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">NULL</span> != p)</span><br><span class="line"> &#123;</span><br><span class="line"> len++;</span><br><span class="line"> p = p-&gt;pNext;  <span class="comment">//p指向下一结点</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> len = getLength(pHead); <span class="comment">//获取链表长度  </span></span><br><span class="line"> <span class="keyword">int</span> i, j, t;   <span class="comment">//用于交换元素值的中间变量</span></span><br><span class="line"> PNODE p, q;   <span class="comment">//用于比较的两个中间指针变量</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>,p=pHead-&gt;pNext ; i&lt;len<span class="number">-1</span> ; i++,p=p-&gt;pNext)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">for</span>(j=i+<span class="number">1</span>,q=p-&gt;pNext;j&lt;len;j++,q=q-&gt;pNext)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">  &#123;</span><br><span class="line">  t = p-&gt;data;</span><br><span class="line">  p-&gt;data = q-&gt;data;</span><br><span class="line">  q-&gt;data = t;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElement</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> PNODE p = pHead;</span><br><span class="line"> <span class="comment">//判断p是否为空并且使p最终指向pos位置的结点</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">NULL</span>!=p &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> p = p-&gt;pNext;</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span>==p || i&gt;pos<span class="number">-1</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="comment">//创建一个新结点</span></span><br><span class="line"> PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"内存分配失败，程序退出!\n"</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> pNew-&gt;data = val;</span><br><span class="line"> <span class="comment">//定义一个临时结点，指向当前p的下一结点</span></span><br><span class="line"> PNODE q = p-&gt;pNext;</span><br><span class="line"> <span class="comment">//将p指向新结点</span></span><br><span class="line"> p-&gt;pNext = pNew;</span><br><span class="line"> <span class="comment">//将q指向之前p指向的结点</span></span><br><span class="line"> pNew-&gt;pNext = q;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteElement</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> * pVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> PNODE p = pHead;</span><br><span class="line"> <span class="comment">//判断p是否为空并且使p最终指向pos结点</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">NULL</span>!=p-&gt;pNext &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> p = p-&gt;pNext;</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">NULL</span>==p-&gt;pNext || i&gt;pos<span class="number">-1</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="comment">//保存要删除的结点</span></span><br><span class="line"> * pVal = p-&gt;pNext-&gt;data;</span><br><span class="line"> <span class="comment">//删除p后面的结点</span></span><br><span class="line"> PNODE q = p-&gt;pNext;</span><br><span class="line"> p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line"> <span class="built_in">free</span>(q);</span><br><span class="line"> q = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表VS数组"><a href="#链表VS数组" class="headerlink" title="链表VS数组"></a>链表VS数组</h3><blockquote><p>数组：适合多读、插入删除少的场景。<br>链表：适用于插入删除多、读写少的场景。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvNDA2NWE2NGVkYTNhNGRjYTljNDlhMWI2OTY4MWU5MTEucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h3><blockquote><p>栈是一种线性逻辑数据结构，栈的元素只能后进先出。最早进入的元素存放的位置叫做栈底，最后进入的元素存放的位置叫栈顶。<br>一个比喻，栈是一个一端封闭一端开放的中空管子，队列是俩端开放的中空管子。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvODFkZDMwMGI3N2UxNDczOWIzMmFiYTQ0ZTc1ODYwMDkucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="如何实现栈？"><a href="#如何实现栈？" class="headerlink" title="如何实现栈？"></a>如何实现栈？</h3><h4 id="数组实现："><a href="#数组实现：" class="headerlink" title="数组实现："></a>数组实现：</h4><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYjgxZTY2MmI5NDcwNDQ3YzkyMDNjYmFjOGQ1YzgxNGEucG5n?x-oss-process=image/format,png"  alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Data[MaxSize];   <span class="comment">// 存储元素的数组</span></span><br><span class="line">    <span class="keyword">int</span> topIdx;       <span class="comment">//栈顶指针</span></span><br><span class="line">&#125;SeqStack;</span><br></pre></td></tr></table></figure><h4 id="链表实现："><a href="#链表实现：" class="headerlink" title="链表实现："></a>链表实现：</h4><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMjA0YTk3YjFlYWE2NDkzMGJjNmM5OTA2MzY0ZTEwMWQucG5n?x-oss-process=image/format,png"  alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; LNode,*LinkList;</span><br></pre></td></tr></table></figure><h3 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h3><blockquote><p>入栈O(1)、出栈O(1)。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//return 0 为false,1为true(下同)</span></span><br><span class="line"><span class="comment">// 将元素推入栈中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SeqStack &amp;L, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 栈已满</span></span><br><span class="line"><span class="keyword">if</span>(L.topIdx==MaxSize <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加入栈中</span></span><br><span class="line">    L.Data[L.topIdx++] = e;</span><br><span class="line">    <span class="comment">// 返回自身</span></span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SeqStack &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 栈空</span></span><br><span class="line">     <span class="keyword">if</span>(L.topIdx == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//返回失败</span></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印并返回栈</span></span><br><span class="line">    <span class="keyword">int</span> val = L.Data[--L.topIdx];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈s是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果下标在0，说明栈中无元素</span></span><br><span class="line">    <span class="keyword">if</span>(s.topIdx != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断栈是否已栈.</span></span><br><span class="line"><span class="function">Status <span class="title">isFull</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 已满返回true(1)</span></span><br><span class="line">    <span class="keyword">if</span>(s.topIdx != MaxSize <span class="number">-1</span>)<span class="comment">//之前的定义数组的最大值的下标</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的应用？"><a href="#栈的应用？" class="headerlink" title="栈的应用？"></a>栈的应用？</h3><blockquote><p>回溯历史，比如方法调用栈。<br>页面面包屑导航。</p></blockquote><h2 id="对列"><a href="#对列" class="headerlink" title="对列"></a>对列</h2><h3 id="什么是对列？"><a href="#什么是对列？" class="headerlink" title="什么是对列？"></a>什么是对列？</h3><blockquote><p>一种线性逻辑数据结构，队列的元素只能后进后出。队列的出口端叫做队头，队列的入口端叫做队尾。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvZDQxZWQzOGU2ODU4NGUyNzk4NTE0ZWRlNDU2NWRhNGUucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="如何实现队列？"><a href="#如何实现队列？" class="headerlink" title="如何实现队列？"></a>如何实现队列？</h3><blockquote><p>数组实现：<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMDFlM2VjN2JmN2NlNGI5N2I1N2MxMzgxZGM3ZTgzNTYucG5n?x-oss-process=image/format,png"  alt></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QelemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>     <span class="comment">//循环队列定义</span></span><br><span class="line">QelemType *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;squene;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initquene</span><span class="params">(squene &amp;s)</span></span>&#123;   <span class="comment">//初始化</span></span><br><span class="line">s.base=(QelemType *)<span class="built_in">malloc</span>(MAXSIZE * <span class="keyword">sizeof</span>(QelemType));</span><br><span class="line"><span class="keyword">if</span>(!s.base)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">s.front=<span class="number">0</span>;</span><br><span class="line">s.rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enquene</span><span class="params">(squene &amp;s,QelemType e)</span></span>&#123;   <span class="comment">//入队操作</span></span><br><span class="line"><span class="keyword">if</span>((s.rear+<span class="number">1</span>)%MAXSIZE==s.front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"duimanb"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s.base[s.rear]=e;</span><br><span class="line">s.rear=(s.rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequene</span><span class="params">(squene &amp;s,QelemType e)</span></span>&#123;   <span class="comment">//出队操作</span></span><br><span class="line"><span class="keyword">if</span>(s.rear==s.front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">e=s.base[s.front];</span><br><span class="line">s.front=(s.front+<span class="number">1</span>)  % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(squene s)</span></span>&#123;  <span class="comment">//求队的长度</span></span><br><span class="line"><span class="keyword">return</span> (s.rear-s.front+MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">squene s;</span><br><span class="line">Initquene(s);</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">enquene(s,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,length(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>链表实现：<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvODE2MTE3ZTU4YzJhNDMwOTk0OWQ3OTY4NzViMTg3OTMucG5n?x-oss-process=image/format,png"  alt></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span>   </span><br><span class="line">QElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Qnode,*QuenePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">QuenePtr front;</span><br><span class="line">QuenePtr rear;</span><br><span class="line">&#125;LinkQuene;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initquene</span><span class="params">(LinkQuene &amp;s)</span></span>&#123;  <span class="comment">//初始化</span></span><br><span class="line">s.front=(QuenePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Qnode));</span><br><span class="line"><span class="keyword">if</span>(!s.front)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">s.rear=s.front;</span><br><span class="line">s.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enquene</span><span class="params">(LinkQuene &amp;s,QElemType e)</span></span>&#123;  <span class="comment">//判断入队</span></span><br><span class="line">QuenePtr p=(QuenePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Qnode));</span><br><span class="line"><span class="keyword">if</span>(!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">p-&gt;data=e;</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">s.rear-&gt;next=p;   </span><br><span class="line">s.rear=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequene</span><span class="params">(LinkQuene &amp;s,QElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.front==s.rear)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"出错"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">QuenePtr p=s.front-&gt;next;</span><br><span class="line">e=p-&gt;data;</span><br><span class="line">s.front-&gt;next=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(s.rear==p)&#123;</span><br><span class="line">s.rear=s.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Destory</span><span class="params">(LinkQuene &amp;s)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(s.front)&#123;</span><br><span class="line">s.rear=s.front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(s.front);</span><br><span class="line">s.front=s.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s.front==s.rear)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkQuene s,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">QuenePtr p=s.front-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=s.rear)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkQuene s;</span><br><span class="line">Initquene(s);</span><br><span class="line"><span class="keyword">int</span> n,m,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">enquene(s,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(s,n);</span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line">dequene(s,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">print</span>(s,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> a=Destory(s);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"已销毁"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"还没销毁呢***"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的基本操作？"><a href="#队列的基本操作？" class="headerlink" title="队列的基本操作？"></a>队列的基本操作？</h3><blockquote><p>入队O(1)、出队O(1)。</p></blockquote><h3 id="对列的应用"><a href="#对列的应用" class="headerlink" title="对列的应用"></a>对列的应用</h3><blockquote><p>信息队列<br>多线程的等待队列<br>网络爬虫的待爬URL队列</p></blockquote><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="什么是哈希表？"><a href="#什么是哈希表？" class="headerlink" title="什么是哈希表？"></a>什么是哈希表？</h3><blockquote><p>一种逻辑数据结构，提供了键(key)和值(value)的映射关系。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYjU0MTkxOGJmMTQ3NDM0YWJjNTRkNjQ1N2ZmYzM5MWEucG5n?x-oss-process=image/format,png"  alt></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///哈希表的头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HashMaxSize 1000    <span class="comment">//宏定义哈希表的最大容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LoadFactor 0.8       <span class="comment">//宏定义负载因子，用于表示哈希表的负载能力。</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;         </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ValueType;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">size_t</span><span class="params">(*HashFunc)</span><span class="params">(KeyType key)</span></span>;     <span class="comment">//重定义哈希函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> Stat     <span class="comment">//用于表示每个元素的状态</span></span><br><span class="line">&#123;</span><br><span class="line">    Empty,     <span class="comment">//空，当前没有值</span></span><br><span class="line">    Valid,     <span class="comment">//有效，当前的值有效</span></span><br><span class="line">    Invalid    <span class="comment">//非空但无效，表示当前结点被删除</span></span><br><span class="line">&#125;Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashElem</span>      //哈希表的元素结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KeyType key;</span><br><span class="line">    ValueType value;</span><br><span class="line">    Stat stat;</span><br><span class="line">&#125;HashElem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTable</span>              //哈希表</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    HashElem data[HashMaxSize];</span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span>;                 <span class="comment">//当前有效的元素个数</span></span><br><span class="line">    HashFunc hashfunc;</span><br><span class="line">&#125;HashTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////哈希表的相关操作///////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashTableInit</span><span class="params">(HashTable* ht,HashFunc hashfunc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashTableInsert</span><span class="params">(HashTable* ht, KeyType key, ValueType value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表的查找，找到返回1，并返回这个结点的value值，未找到返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashTableFind</span><span class="params">(HashTable* ht, KeyType key,ValueType* value,<span class="keyword">size_t</span>* cur)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除值为key的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashRemove</span><span class="params">(HashTable* ht, KeyType key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///判断哈希表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashEmpty</span><span class="params">(HashTable* ht)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求哈希表的大小</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">HashSize</span><span class="params">(HashTable* ht)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashTableDestroy</span><span class="params">(HashTable* ht)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///以下是对各类功能的实现</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">HashFuncDefault</span><span class="params">(KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key%HashMaxSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashTableInit</span><span class="params">(HashTable* ht)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)    <span class="comment">//非法输入</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ht-&gt;<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">    ht-&gt;hashfunc = HashFuncDefault;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; HashMaxSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht-&gt;data[i].key = <span class="number">0</span>;</span><br><span class="line">        ht-&gt;data[i].stat = Empty;</span><br><span class="line">        ht-&gt;data[i].value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//哈希表的插入 ,插入成功返回1，插入失败返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashTableInsert</span><span class="params">(HashTable* ht, KeyType key, ValueType value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ht-&gt;<span class="built_in">size</span> &gt;= HashMaxSize*LoadFactor)   <span class="comment">//当哈希表的size超出了负载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1.先根据哈希函数将key转换，求得key在哈希表中的下标</span></span><br><span class="line">    <span class="keyword">size_t</span> cur = ht-&gt;hashfunc(key);</span><br><span class="line">    <span class="comment">//2.判断当前下标是否被占用</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht-&gt;data[cur].key == key)     <span class="comment">//用于保证不会用重复的数字存入哈希表</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ht-&gt;data[cur].stat != Valid)</span><br><span class="line">        &#123;</span><br><span class="line">            ht-&gt;data[cur].key = key;</span><br><span class="line">            ht-&gt;data[cur].value = value;</span><br><span class="line">            ht-&gt;data[cur].stat = Valid;</span><br><span class="line">            ht-&gt;<span class="built_in">size</span>++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表的查找 找到返回1，没找到返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashTableFind</span><span class="params">(HashTable* ht, KeyType key, ValueType* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//通过哈希函数找到key所对应的下标</span></span><br><span class="line">    <span class="keyword">size_t</span> offset=ht-&gt;hashfunc(key);</span><br><span class="line">    <span class="comment">//若当前下标所对应的值正好是key并且当前的状态必须为valid才返回</span></span><br><span class="line">    <span class="keyword">if</span> (ht-&gt;data[offset].key == key&amp;&amp;ht-&gt;data[offset].stat==Valid)</span><br><span class="line">    &#123;</span><br><span class="line">        *value = ht-&gt;data[offset].value;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若当前下标所对应的值不是key，则继续向后进行查找，直到找到stat等于empty</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (ht-&gt;data[offset].stat != Empty)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ht-&gt;data[offset].key != key)</span><br><span class="line">            &#123;</span><br><span class="line">                offset++;</span><br><span class="line">                <span class="comment">//判断是否下标已超出最大值</span></span><br><span class="line">                <span class="keyword">if</span> (offset &gt;= HashMaxSize)</span><br><span class="line">                    offset = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ht-&gt;data[offset].stat == Valid)</span><br><span class="line">                &#123;</span><br><span class="line">                    *value = ht-&gt;data[offset].value;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    offset++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashTableFindCur</span><span class="params">(HashTable* ht, KeyType key, <span class="keyword">size_t</span>* cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; HashMaxSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht-&gt;data[i].key == key &amp;&amp; ht-&gt;data[i].stat == Valid)</span><br><span class="line">        &#123;</span><br><span class="line">            *cur = i;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashRemove</span><span class="params">(HashTable* ht, KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)  <span class="comment">//非法输入</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//先用find函数查找key是否存在</span></span><br><span class="line">    ValueType value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> cur = <span class="number">0</span>;                      <span class="comment">//得到要删除元素的下标</span></span><br><span class="line">    <span class="keyword">int</span> ret=HashTableFindCur(ht,key,&amp;cur);<span class="comment">//通过find函数得到key是否存在在哈希表中</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ht-&gt;data[cur].stat = Invalid;</span><br><span class="line">        ht-&gt;<span class="built_in">size</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashEmpty</span><span class="params">(HashTable* ht)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ht-&gt;<span class="built_in">size</span> &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求哈希表的大小</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">HashSize</span><span class="params">(HashTable* ht)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ht-&gt;<span class="built_in">size</span>-&gt;data[i].stat=Empty;<span class="comment">//HashElem</span></span><br><span class="line">        ht-&gt;data[i].key = <span class="number">0</span>;</span><br><span class="line">        ht-&gt;data[i].value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ht-&gt;<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashPrint</span><span class="params">(HashTable* ht,<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span>         <span class="comment">//打印哈希表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ht == <span class="literal">NULL</span> || ht-&gt;<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; HashMaxSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht-&gt;data[i].stat != Empty)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[%d]  key=%d  value=%d  stat=%d\n"</span>, i, ht-&gt;data[i].key,</span><br><span class="line">            ht-&gt;data[i].value, ht-&gt;data[i].stat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表的基本操作？"><a href="#哈希表的基本操作？" class="headerlink" title="哈希表的基本操作？"></a>哈希表的基本操作？</h3><blockquote><p>写入：O(1)、读取：O(1)、扩容：O(n)。</p></blockquote><h3 id="什么是哈希函数？"><a href="#什么是哈希函数？" class="headerlink" title="什么是哈希函数？"></a>什么是哈希函数？</h3><blockquote><p>哈希表本质上是一个数组，只是数组只能根据下标，像a<a href="#">0</a> a<a href="#">1</a> a<a href="#">2</a> a<a href="#">3</a> 这样来访问，而哈希表的key则是以字符串类型为主的。<br>通过哈希函数，我们可以把字符串或其它类型的key，转化成数组的下标index。<br>如给出一个长度为8的数组，则：<br>当key=001121时，<br><code>index = HashCode (&quot;001121&quot;) % Array.length = 7</code><br>当key=this时，<br><code>index = HashCode (&quot;this&quot;) % Array.length = 6</code><br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvZjRkYTg3OTg0NmI5NGVmYTg3YTIzNzBmNjkyMmVhNTEucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="什么是哈希冲突？"><a href="#什么是哈希冲突？" class="headerlink" title="什么是哈希冲突？"></a>什么是哈希冲突？</h3><blockquote><p>不同的key通过哈希函数获得的下标有可能是相同的，例如002936这个key对应的数组下标是2，002947对应的数组下标也是2，这种情况就是哈希冲突。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMDgzNjhjMDU5NjhhNDAwZWIzNzEyNWU1ZGVhMDY5MjkucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="如何解决哈希冲突？"><a href="#如何解决哈希冲突？" class="headerlink" title="如何解决哈希冲突？"></a>如何解决哈希冲突？</h3><blockquote><p>开放寻址法：Threadlocal<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvZTdiZTUyYTk0Y2IzNDEwM2E4ODQ3NmY0Y2I1YTQ4NjgucG5n?x-oss-process=image/format,png"  alt><br>链表法：Hashmap<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMGVkMWI0MzkzMjlhNGU1NWIwNzEyYzNiYzUwOTM3ZTIucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="什么是树？"><a href="#什么是树？" class="headerlink" title="什么是树？"></a>什么是树？</h3><blockquote><p>树(tree)是n(n&gt;=0)个节点的有限集。<br>当n=0时，称为空树。在任意一个非空树中，有如下特点：<br>1.有且仅有一个特定的称为根的节点。<br>2.当n&gt;1时，其余节点可分为m(m&gt;0)个互不相交的有限集，每个集合本身又是一个树，并称为根的子树。</p></blockquote><h3 id="树的遍历？"><a href="#树的遍历？" class="headerlink" title="树的遍历？"></a>树的遍历？</h3><h4 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h4><blockquote><p>前序：根节点、左子树、右子树。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMDcxYjZjMzRhM2I4NDkwOTk4NzA3MTU5ZjMwYjAyZTIucG5n?x-oss-process=image/format,png"  alt><br>中序：左子树、根节点、右子树。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYjViOWQwZDAzNzczNDU2NzgwMzJiZDVhNDIxZWNkODUucG5n?x-oss-process=image/format,png"  alt><br>后序：左子树、右子树、根节点。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYjhhYmNhMWU3NDBjNGY1MTk1ZDg1MTE2OWZhYTgwNTAucG5n?x-oss-process=image/format,png"  alt><br>实现方式：递归或者栈。</p></blockquote><h4 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h4><blockquote><p>层序：一层一层遍历。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvNTE2NDI3MmZmYTVmNGViZGI0MTkwOTQ4NmM2OTJmOGMucG5n?x-oss-process=image/format,png"  alt><br>实现方式：队列。</p></blockquote><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="什么是二叉树？"><a href="#什么是二叉树？" class="headerlink" title="什么是二叉树？"></a>什么是二叉树？</h3><blockquote><p>二叉树(binary tree)是树的一种特殊形式。二叉，顾名思义，这种树的每个节点最多有2个孩子节点。注意，这里是最多有2个，也可能只有1个，或者没有孩子节点。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///二叉树的建立</span></span><br><span class="line"><span class="function">Status <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span> <span class="comment">//&amp;的意思是传进来节点指针的引用，括号内等价于 BiTreeNode* &amp;T,目的是让传递进来的指针发生改变</span></span></span><br><span class="line"><span class="function"></span>&#123;               　　　　　　　　 </span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">' '</span>)             <span class="comment">//当遇到 时，令树的根节点为NULL，从而结束该分支的递归</span></span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))));</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        <span class="comment">//T = new BiTreeNode;</span></span><br><span class="line"> </span><br><span class="line">        T-&gt;data=c;<span class="comment">//生成根节点</span></span><br><span class="line">        createBiTree(T-&gt;lchild);<span class="comment">//构造左子树</span></span><br><span class="line">        createBiTree(T-&gt;rchild);<span class="comment">//构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是满二叉树？"><a href="#什么是满二叉树？" class="headerlink" title="什么是满二叉树？"></a>什么是满二叉树？</h3><blockquote><p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同一层级上，那么这个树就是满二叉树。</p></blockquote><h3 id="什么是完全二叉树？"><a href="#什么是完全二叉树？" class="headerlink" title="什么是完全二叉树？"></a>什么是完全二叉树？</h3><blockquote><p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvM2YxNjZmY2VhOThjNDYyM2ExNzY4OTFlNmFmMTNjYzgucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><h3 id="什么是二叉查找树？"><a href="#什么是二叉查找树？" class="headerlink" title="什么是二叉查找树？"></a>什么是二叉查找树？</h3><blockquote><p>二叉查找树在二叉树的基础上增加了以下几个条件：<br>1.如果左子树不为空，则左子树上所有节点的值均小于根节点的值。<br>2.如果右子树不为空，则右子树上所有节点的值均大于根节点的值。<br>3.左、右子树也都是二叉查找树。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvODIzNWM0OTg0YjdhNDc1YTk3NWMwZTNiM2I1ZTYzNzIucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="二叉查找树的作用？"><a href="#二叉查找树的作用？" class="headerlink" title="二叉查找树的作用？"></a>二叉查找树的作用？</h3><blockquote><p>查找：二分查找。<br>排序：中序遍历。</p></blockquote><h3 id="二叉树的实现方式？"><a href="#二叉树的实现方式？" class="headerlink" title="二叉树的实现方式？"></a>二叉树的实现方式？</h3><blockquote><p>链表。<br>数组：对于稀疏二叉树来说，数组表示法是非常浪费空间的。</p></blockquote><h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><h3 id="什么是二叉堆？"><a href="#什么是二叉堆？" class="headerlink" title="什么是二叉堆？"></a>什么是二叉堆？</h3><blockquote><p>二叉堆是一种特殊的完全二叉树，它分为俩个类型：最大堆和最小堆。<br>最大堆的任何一个父节点的值，都大于或等于它左、右孩子节点的值。<br>最小堆的任何一个父节点的值，都小于或等于它左、右孩子节点的值。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMGIxYjkxOWYyNWE5NDNlNzhmZDk3YWNjNDNhNDZlMGUucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h3 id="二叉堆的基本操作？"><a href="#二叉堆的基本操作？" class="headerlink" title="二叉堆的基本操作？"></a>二叉堆的基本操作？</h3><h4 id="插入：插入最末，节点上浮。"><a href="#插入：插入最末，节点上浮。" class="headerlink" title="插入：插入最末，节点上浮。"></a>插入：插入最末，节点上浮。</h4><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYTA3YmQxOTA3NWQ2NGMxMWIwM2E3ZWI3ZDhhMTk4OTAucG5n?x-oss-process=image/format,png"  alt></p><h4 id="删除：删除头节点，尾节点放到头部，再下沉。"><a href="#删除：删除头节点，尾节点放到头部，再下沉。" class="headerlink" title="删除：删除头节点，尾节点放到头部，再下沉。"></a>删除：删除头节点，尾节点放到头部，再下沉。</h4><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvODA5YWNjNzA4NGI4NGRhNmI0NDIwNmE2NTRjMGYxNmUucG5n?x-oss-process=image/format,png"  alt></p><h4 id="构建二叉堆：所有非叶子节点依次下沉。"><a href="#构建二叉堆：所有非叶子节点依次下沉。" class="headerlink" title="构建二叉堆：所有非叶子节点依次下沉。"></a>构建二叉堆：所有非叶子节点依次下沉。</h4><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYzA2NThlNjM0MDJjNGJjZWJhNTc4MDcyNGNjNTI0NGUucG5n?x-oss-process=image/format,png"  alt></p><h3 id="二叉堆的实现方式？"><a href="#二叉堆的实现方式？" class="headerlink" title="二叉堆的实现方式？"></a>二叉堆的实现方式？</h3><blockquote><p>数组：<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvOGIwY2RjMmMzZGJhNDA5MGFkMDBkODA3YjI3OGZkYzAucG5n?x-oss-process=image/format,png"  alt></p></blockquote><h1 id="常见排序算法"><a href="#常见排序算法" class="headerlink" title="常见排序算法"></a>常见排序算法</h1><h2 id="十大经典排序算法"><a href="#十大经典排序算法" class="headerlink" title="十大经典排序算法"></a>十大经典排序算法</h2><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvZDY3NTY2NWYzYTQwNGE1MWJhYzViN2I2MDFkOTk0NDUucG5n?x-oss-process=image/format,png"  alt></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较俩个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p></blockquote><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvOTY5N2ViZGNjN2NkNGZmMmE2NmZkYzJmZWMyMGNmMGYucG5n?x-oss-process=image/format,png"  alt><br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvODA3ZDkzZTgwZmNlNDUzYmIwMDczOTE4OWU3NjE5ODcucG5n?x-oss-process=image/format,png"  alt></p><blockquote><p>1.比较相邻的元素。如果第一个比第二个大，就交换它们俩个。<br>2.对每一对相邻元素做相同的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>重复步骤1～3，直到排序完成。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">m=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><blockquote><p>优点：实现和理解简单。<br>缺点：时间复杂度是O(n^2)，排序元素多时效率比较低。</p></blockquote><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>数据已经基本有序，且数据量较小的场景。</p></blockquote><h3 id="场景优化"><a href="#场景优化" class="headerlink" title="场景优化"></a>场景优化</h3><h4 id="已经有序了还再继续冒泡问题"><a href="#已经有序了还再继续冒泡问题" class="headerlink" title="已经有序了还再继续冒泡问题"></a>已经有序了还再继续冒泡问题</h4><blockquote><p>本轮排序中，元素没有交换，则isSorted为true，直接跳出大循环，避免后续无意义的重复。</p></blockquote><h4 id="部分已经有序了，下一轮的时候但还是会被遍历"><a href="#部分已经有序了，下一轮的时候但还是会被遍历" class="headerlink" title="部分已经有序了，下一轮的时候但还是会被遍历"></a>部分已经有序了，下一轮的时候但还是会被遍历</h4><blockquote><p>记录有序和无序的边界，有序的部分在下一轮就不用遍历了。</p></blockquote><h4 id="只有一个元素不对，但需要走完全部轮排序"><a href="#只有一个元素不对，但需要走完全部轮排序" class="headerlink" title="只有一个元素不对，但需要走完全部轮排序"></a>只有一个元素不对，但需要走完全部轮排序</h4><blockquote><p>鸡尾酒排序：元素的比较和交换是双向的，就像摇晃鸡尾酒一样。</p></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法的一个非常典型的应用。递归的把当前序列分割成俩半，在保持元素顺序的同时将上一步得到的子序列集成到一起（归并），最终形成一个有序数列。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvNzRhNmI0MmVhZDc1NGFhOWE0ZDVjZTE3NTZkNWRmYTgucG5n?x-oss-process=image/format,png"  alt><br>1.把长度为n的输入序列分成俩个长度为n/2的子序列。<br>2.对这俩个子序列分别采用归并排序。<br>3.将俩个排序好的子序列合并成一个最终的排序序列。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将序列对半拆分直到序列长度为1*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_UptoDown</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (<span class="built_in">end</span> - start) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start &gt;= <span class="built_in">end</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MergeSort_UptoDown(num, start, mid);</span><br><span class="line">    MergeSort_UptoDown(num, mid + <span class="number">1</span>, <span class="built_in">end</span>);</span><br><span class="line"></span><br><span class="line">    Merge(num, start, mid, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>((<span class="built_in">end</span>-start+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    <span class="comment">//申请空间来存放两个有序区归并后的临时区域</span></span><br><span class="line">    <span class="keyword">int</span> i = start;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= <span class="built_in">end</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[i] &lt;= num[j])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[k++] = num[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[k++] = num[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k++] = num[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= <span class="built_in">end</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k++] = num[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将临时区域中排序后的元素，整合到原数组中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[start + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><blockquote><p>性能好且稳定，时间复杂度为O(nlogn)。<br>稳定排序，适用场景多。</p></blockquote><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><blockquote><p>非原地排序，空间复杂度高。</p></blockquote><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>大数据量且期望要求排序稳定的场景。</p></blockquote><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>快速排序使用分治法策略来把一个序列分为较小和较大的2个子序列，然后递归地排序俩个子序列，以达到整个数列最终有序。</p></blockquote><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYjg2ZTE3Mzc2N2UwNGUwZjk4M2ZjNTQxZGYyMDY5ZDIucG5n?x-oss-process=image/format,png"  alt></p><blockquote><p>1.从数列中挑出一个元素，称为“基准值(pivot)”。<br>2.重新排序数列，所有元素比基准值小的摆放在基准值前面，所有元素比基准值大的摆在基准值的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的之间位置。这个称为分区(partition)操作。<br>3.递归地对「小于基准值元素的子数列」和「大于基准值元素的子数列」进行排序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = low;</span><br><span class="line">    <span class="keyword">int</span> last  = high;</span><br><span class="line">    <span class="keyword">int</span> key = arr[first];</span><br><span class="line">    <span class="keyword">if</span>(low &gt;= high)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span>(first &lt; last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; arr[last] &gt; key)</span><br><span class="line">        &#123;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[first] = arr[last];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; arr[first] &lt; key)</span><br><span class="line">        &#123;</span><br><span class="line">            first++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[last] = arr[first];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[first] = key;</span><br><span class="line"></span><br><span class="line">    quickSort(arr, low, first<span class="number">-1</span>);</span><br><span class="line">    quickSort(arr, first+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">81</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    quickSort(a, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><blockquote><p>性能较好，时间复杂度最好为O(nlogn)，大多数场景性能都接近最优。<br>原地排序，时间复杂度优于归并排序。</p></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>部分场景，排序性能最差为O(n^2)。<br>不稳定排序。</p></blockquote><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>大数据量且不要求排序稳定的场景。</p></blockquote><h3 id="场景优化-1"><a href="#场景优化-1" class="headerlink" title="场景优化"></a>场景优化</h3><h4 id="每次的基准元素都选中最大或最小元素"><a href="#每次的基准元素都选中最大或最小元素" class="headerlink" title="每次的基准元素都选中最大或最小元素"></a>每次的基准元素都选中最大或最小元素</h4><blockquote><p>随机选择基准元素，而不是选择第一个元素。<br>三数取中法，随机选择三个数，取中间数为基准元素。</p></blockquote><h4 id="数列含有大量重复数据"><a href="#数列含有大量重复数据" class="headerlink" title="数列含有大量重复数据"></a>数列含有大量重复数据</h4><blockquote><p>大于、小于、等于基准值。</p></blockquote><h4 id="快排的性能优化"><a href="#快排的性能优化" class="headerlink" title="快排的性能优化"></a>快排的性能优化</h4><blockquote><p>双轴快排：2个基准数，例子：Arrays.sort() 。</p></blockquote><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p></blockquote><h3 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvOTA1YWRiZTBlNjgwNDRkZjhhMjRiNDdhNzJhMjNmYjEucG5n?x-oss-process=image/format,png"  alt></p><blockquote><p>1.将初始待排序关键字序列(R1,R2….Rn)构建成最大堆，此堆为初始的无序区。<br>2.将堆顶元素R<a href="#">1</a>与最后一个元素R<a href="#">n</a>交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R<a href="#">1,2…n-1</a>&lt;=R<a href="#">n</a>。<br>3.由于交换后新的堆顶R<a href="#">1</a>可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R<a href="#">1</a>与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s,<span class="keyword">int</span> m)</span><span class="comment">//一次筛选的过程</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc,j;</span><br><span class="line">    rc=a[s];</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">2</span>*s;j&lt;=m;j=j*<span class="number">2</span>)<span class="comment">//通过循环沿较大的孩子结点向下筛选</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;m&amp;&amp;a[j]&lt;a[j+<span class="number">1</span>]) j++;<span class="comment">//j为较大的记录的下标</span></span><br><span class="line">        <span class="keyword">if</span>(rc&gt;a[j]) <span class="keyword">break</span>;</span><br><span class="line">        a[s]=a[j];s=j;</span><br><span class="line">    &#125;</span><br><span class="line">    a[s]=rc;<span class="comment">//插入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp,i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=n/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)<span class="comment">//通过循环初始化顶堆</span></span><br><span class="line">    &#123;</span><br><span class="line">        HeapAdjust(a,i,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=a[<span class="number">1</span>];</span><br><span class="line">        a[<span class="number">1</span>]=a[i];</span><br><span class="line">        a[i]=temp;<span class="comment">//将堆顶记录与未排序的最后一个记录交换</span></span><br><span class="line">        HeapAdjust(a,<span class="number">1</span>,i<span class="number">-1</span>);<span class="comment">//重新调整为顶堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    HeapSort(a,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><blockquote><p>性能较好，时间复杂度为O(nlogn)。<br>时间复杂度比较稳定。<br>辅助空间复杂度为O(1)。</p></blockquote><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>数据变动的情况下，堆的维护成本较高。</p></blockquote><h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>数据量大且数据呈流式输入的场景。</p></blockquote><h3 id="为什么实际情况快排比堆排快？"><a href="#为什么实际情况快排比堆排快？" class="headerlink" title="为什么实际情况快排比堆排快？"></a>为什么实际情况快排比堆排快？</h3><blockquote><p>堆排序的过程可知，建立最大堆后，会将堆顶的元素和最后一个元素对调，然后让那最后一个元素从顶上往下沉到恰当的位置，因为底部的元素一定是比较小的，下沉的过程中会进行大量的近乎无效的比较。所以堆排虽然和快排一样复杂度都是O(NlogN)，但堆排复杂度的常系数更大。</p></blockquote><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p></blockquote><h3 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMzlhYWFiZGFjMDM5NDk4MzlkNmJlZTFlMGJlMDgwNTYucG5n?x-oss-process=image/format,png"  alt></p><blockquote><p>1.找出待排序的数组中最大元素。<br>2.构建一个数组C，长度为最大元素值+1。<br>3.遍历无序的随机数列，每一个整数按照其值对号入座，对应数组下标的值加1。<br>4.遍历数组C，输出数组元素的下标值，元素的值是几就输出几次。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arry</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count_sort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> *sorted_arr, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *count_arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> i; </span><br><span class="line"><span class="comment">//初始化计数数组 </span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">count_arr[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//统计i的次数 </span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">count_arr[arr[i]]++;</span><br><span class="line"><span class="comment">//对所有的计数累加 </span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">count_arr[i] += count_arr[i<span class="number">-1</span>]; </span><br><span class="line"><span class="comment">//逆向遍历源数组（保证稳定性），根据计数数组中对应的值填充到先的数组中 </span></span><br><span class="line"><span class="keyword">for</span>(i = n; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">sorted_arr[count_arr[arr[i<span class="number">-1</span>]]<span class="number">-1</span>] = arr[i<span class="number">-1</span>];</span><br><span class="line">count_arr[arr[i<span class="number">-1</span>]]--;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">free</span>(count_arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"待排序数组的大小 n="</span>); </span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;n); </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line"><span class="keyword">int</span> *sorted_arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line"></span><br><span class="line">srand (time (<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = rand() % <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"随机生成数值为0~99的数组...\n"</span>);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"初始化数组: "</span>);</span><br><span class="line">print_arry(arr, n);</span><br><span class="line">count_sort(arr, sorted_arr, n);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"排序后的数组："</span>); </span><br><span class="line">print_arry(sorted_arr, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">system (<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><blockquote><p>性能完爆比较排序，时间复杂度为O(n+k)，k为数列最大值。<br>稳定排序。</p></blockquote><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>适用范围比较狭窄。</p></blockquote><h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>数列元素是整数，当k不是很大且序列比较集中时适用。</p></blockquote><h3 id="场景优化-2"><a href="#场景优化-2" class="headerlink" title="场景优化"></a>场景优化</h3><h4 id="数字不是从0开始，会存在空间浪费的问题"><a href="#数字不是从0开始，会存在空间浪费的问题" class="headerlink" title="数字不是从0开始，会存在空间浪费的问题"></a>数字不是从0开始，会存在空间浪费的问题</h4><blockquote><p>数列的最小值作为偏移量，以数列最大值-最小值+1作为统计数组的长度。</p></blockquote><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h3 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。实现原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。</p></blockquote><h3 id="实现步骤-4"><a href="#实现步骤-4" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvYzFmOWE0NjZhZDcwNGVmYjk0NTA3ZGQ1ZTA0MjQ0ZDgucG5n?x-oss-process=image/format,png"  alt></p><blockquote><p>1.创建桶，区间跨度=(最大值-最小值)/(桶的数量-1)。<br>2.遍历数列，对号入座。<br>3.每个桶内进行排序，可选择快排等。<br>4.遍历所有的桶，输出所有元素。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter:\n"</span>);</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],t,<span class="built_in">max</span>=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">max</span>;i++)</span><br><span class="line">a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">a[t]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">max</span>;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;a[k];y++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><blockquote><p>最优时间复杂度为O(n)，完爆比较排序算法。</p></blockquote><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>适用范围比较狭窄。<br>时间复杂度不稳定。</p></blockquote><h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><blockquote><p>数据服从均匀分布的场景。</p></blockquote><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><blockquote><p>随机生成区间0-K之间的序列，共计N个数字，利用各种算法进行排序，记录排序所需时间。<br><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91Y2MuYWxpY2RuLmNvbS9waWMvZGV2ZWxvcGVyLWVjb2xvZ3kvMmZhZjUwZTZjNmQ5NDJkZmEwZjBiZWRjODc3OWNkMDEucG5n?x-oss-process=image/format,png"  alt></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C陷阱与缺陷</title>
      <link href="/2020/07/31/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7/"/>
      <url>/2020/07/31/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>0.0 前言<br>书籍推荐及参考：《C陷阱与缺陷》（<code>C Traps and Pitfalls</code>）[美]Andrew Koenig 著<br>人民邮电出版社出版 高巍译</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前端学习路线，持续更新～"><a href="#前端学习路线，持续更新～" class="headerlink" title="前端学习路线，持续更新～"></a>前端学习路线，持续更新～</h1><p><img src="/" class="lazyload" data-src="https://s1.ax1x.com/2020/07/30/auTLSe.png"  alt="前端学习路线"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序DAY2</title>
      <link href="/2020/07/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FDAY2/"/>
      <url>/2020/07/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FDAY2/</url>
      
        <content type="html"><![CDATA[<p>DAY 2</p><h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h1><h2 id="对标签绑定点击事件"><a href="#对标签绑定点击事件" class="headerlink" title="对标签绑定点击事件"></a>对标签绑定点击事件</h2><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"clickme"</span> <span class="attr">data-nid</span>=<span class="string">"123"</span> <span class="attr">data-name</span>=<span class="string">"SD"</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 点击绑定的事件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  clickme: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nid = e.currentTarget.dataset;</span><br><span class="line">    <span class="built_in">console</span>.log(nid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><h3 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'/pages/redirect/redirect?id='</span>+nid</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="js-跳转到的页面如果想要接受参数，可以在xx-js的onLoad方法中接受。"><a href="#js-跳转到的页面如果想要接受参数，可以在xx-js的onLoad方法中接受。" class="headerlink" title="js  跳转到的页面如果想要接受参数，可以在xx.js的onLoad方法中接受。"></a>js  跳转到的页面如果想要接受参数，可以在xx.js的onLoad方法中接受。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意事项：只能跳转到非tabbar的页面</p><h2 id="通过标签进行跳转"><a href="#通过标签进行跳转" class="headerlink" title="通过标签进行跳转"></a>通过标签进行跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/redirect/redirect?id=666"</span>&gt;</span>跳转到页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"changeData"</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message1:<span class="string">"i love you"</span>,</span><br><span class="line">    message2:<span class="string">"me too"</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">changeData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.message1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.message2);</span><br><span class="line">    <span class="comment">//修改数据</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;<span class="attr">message1</span>:<span class="string">"i very love you!"</span>&#125;),</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;<span class="attr">message2</span>:<span class="string">"me too too!"</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="基本显示"><a href="#基本显示" class="headerlink" title="基本显示"></a>基本显示</h2><h3 id="wxml-1"><a href="#wxml-1" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>数据：&#123;&#123;message1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="展示数据js"><a href="#展示数据js" class="headerlink" title="展示数据js"></a>展示数据js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message1:<span class="string">"i love you"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="wxml-2"><a href="#wxml-2" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"changeData"</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改数据-js"><a href="#修改数据-js" class="headerlink" title="修改数据 js"></a>修改数据 js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message1:<span class="string">"i love you"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  changeData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;<span class="attr">message1</span>:<span class="string">"i very love you!"</span>&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h1><h2 id="方式一：（不推荐）"><a href="#方式一：（不推荐）" class="headerlink" title="方式一：（不推荐）"></a>方式一：（不推荐）</h2><h3 id="wxml-3"><a href="#wxml-3" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"getUserName"</span>&gt;</span>获取当前用户名<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-2"><a href="#js-2" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getUserName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用微信的接口，获取当前用户信息</span></span><br><span class="line">    wx.getUserInfo(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//调用成功后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>,res.userInfo.nickName)</span><br><span class="line">      fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//调用失败后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fail'</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">## 方式二：（推荐）</span></span><br><span class="line"><span class="string">### wxml</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;button open-type=<span class="string">"getUserInfo bindgetuserinfo="</span>xxx<span class="string">"&gt;授权登录&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-3"><a href="#js-3" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xxx : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用微信的接口，获取当前用户信息</span></span><br><span class="line">    wx.getUserInfo(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//调用成功后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>,res.userInfo.nickName)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          <span class="comment">//获取用户昵称</span></span><br><span class="line">          name : res.userInfo.nickName,</span><br><span class="line">          <span class="comment">//获取用户头像</span></span><br><span class="line">          path : res.userInfo.avatarUrl</span><br><span class="line">        &#125;)</span><br><span class="line">      fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//调用失败后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fail'</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1.想要获取用户信息必须要经过用户的授权（button）<br>2.如果用户一开始不给授权但后面又想给了，可以通过调用wx.opensettings</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//wx.openSetting进行手动授权</span></span><br><span class="line">    wx.openSetting(&#123;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取用户位置信息"><a href="#获取用户位置信息" class="headerlink" title="获取用户位置信息"></a>获取用户位置信息</h1><h3 id="wxml-4"><a href="#wxml-4" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"getLocalPath"</span>&gt;</span>&#123;&#123;LocalPath&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-4"><a href="#js-4" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    LocalPath:<span class="string">"请选择位置"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getLocalPath: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.chooseLocation(&#123;</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        that.setData(&#123;<span class="attr">LocalPath</span>:res.address&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="for指令"><a href="#for指令" class="headerlink" title="for指令"></a>for指令</h1><h3 id="wxml-5"><a href="#wxml-5" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;dataList&#125;&#125;"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  &#123;&#123;uInfo.name&#125;&#125;</span><br><span class="line">  &#123;&#123;uInfo.age&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;uInfo&#125;&#125;"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-5"><a href="#js-5" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataList:[<span class="string">"wsy"</span>,<span class="string">"wsk"</span>,<span class="string">"wsl"</span>],</span><br><span class="line">    uInfo:&#123;</span><br><span class="line">      name:<span class="string">"Alex"</span>,</span><br><span class="line">      age:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h1><h3 id="wxml-6"><a href="#wxml-6" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"UploadImage"</span>&gt;</span>请上传图片<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;imageList&#125;&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">25</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js-6"><a href="#js-6" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">        imageList:[<span class="string">"/static/morentouxiang.png"</span>,<span class="string">"/static/morentouxiang.png"</span>,<span class="string">"/static/morentouxiang.png"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  UploadImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count : <span class="number">9</span>,</span><br><span class="line">      sizeType : [<span class="string">'original'</span>,<span class="string">'compressed'</span>],</span><br><span class="line">      sourceType : [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//res.tempFilePaths</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          imageList:res.tempFilePaths</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//默认的图片 + 选择的图片</span></span><br><span class="line">        <span class="comment">//that.setData(&#123;</span></span><br><span class="line">        <span class="comment">//  imageList : that.data.imageList.concat(res.tempFilePaths)</span></span><br><span class="line">        <span class="comment">//&#125;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h3><p>图片目前只是上传到了内存。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><h2 id="标签（组件）"><a href="#标签（组件）" class="headerlink" title="标签（组件）"></a>标签（组件）</h2><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p>跳转到其他页面（默认只能跳转到非tabbar页面）</p><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p>按钮（建议在获取用户信息时用）</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="bindtap"><a href="#bindtap" class="headerlink" title="bindtap"></a>bindtap</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span> =<span class="string">"xxxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span> //不传参数</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span> =<span class="string">"xxxx"</span> <span class="attr">data-xx</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span> //带参数</span><br></pre></td></tr></table></figure><p>传参数后在js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxxx:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   e.currentTarget.dataset</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="wx-navigateTo"><a href="#wx-navigateTo" class="headerlink" title="wx.navigateTo"></a>wx.navigateTo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">'/pages/clikeauctionitem2/clikeauctionitem2'</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-openSetting"><a href="#wx-openSetting" class="headerlink" title="wx.openSetting"></a>wx.openSetting</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wx.openSetting(&#123;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-getUserInfo"><a href="#wx-getUserInfo" class="headerlink" title="wx.getUserInfo"></a>wx.getUserInfo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wx.getUserInfo(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//调用成功后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>,res.userInfo.nickName)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          <span class="comment">//获取用户昵称</span></span><br><span class="line">          homeUserName : res.userInfo.nickName,</span><br><span class="line">          <span class="comment">//获取用户头像</span></span><br><span class="line">          morentouxiangPath : res.userInfo.avatarUrl</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//调用失败后触发</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fail'</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注意：结合button按钮实现</p><h3 id="wx-chooseLocation"><a href="#wx-chooseLocation" class="headerlink" title="wx.chooseLocation"></a>wx.chooseLocation</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.chooseLocation(&#123;</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        that.setData(&#123;<span class="attr">LocalPath</span>:res.address&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-chooseImage"><a href="#wx-chooseImage" class="headerlink" title="wx.chooseImage"></a>wx.chooseImage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wx.chooseImage(&#123;</span><br><span class="line">      count : <span class="number">9</span>,</span><br><span class="line">      sizeType : [<span class="string">'original'</span>,<span class="string">'compressed'</span>],</span><br><span class="line">      sourceType : [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//res.tempFilePaths</span></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          imageList:res.tempFilePaths</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//默认的图片 + 选择的图片</span></span><br><span class="line">        <span class="comment">//that.setData(&#123;</span></span><br><span class="line">        <span class="comment">//  imageList : that.data.imageList.concat(res.tempFilePaths)</span></span><br><span class="line">        <span class="comment">//&#125;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="数据绑定-1"><a href="#数据绑定-1" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="注意：setData-that-this"><a href="#注意：setData-that-this" class="headerlink" title="注意：setData + that/this"></a>注意：setData + that/this</h3><h2 id="for指令-1"><a href="#for指令-1" class="headerlink" title="for指令"></a>for指令</h2><h3 id="注意：setData-that-this-1"><a href="#注意：setData-that-this-1" class="headerlink" title="注意：setData + that/this"></a>注意：setData + that/this</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自学HTML</title>
      <link href="/2020/05/07/%E8%87%AA%E5%AD%A6HTML/"/>
      <url>/2020/05/07/%E8%87%AA%E5%AD%A6HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>上周时间花了一些时间学了一下HTML，做了一些笔记，还是比较简单的，我的打算是学完HTML后，继续CSS，然后JS，<br>最后看看HTML5和CSS3,在此记录自己的学习过程.</p></blockquote><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><h2 id="什么是HTML？"><a href="#什么是HTML？" class="headerlink" title="什么是HTML？"></a>什么是HTML？</h2><blockquote><p>HTML是用来描述网页的一种语言.<br> 1.超文本标记语言—–Hyper Text Markup Language<br> 2.它不是编程语言，是一种标记语言（markup language)<br> 3.标记语言是一套标记标签（markup tag）<br>4.HTML使用标记标签来描述网</p></blockquote><h2 id="HTML标签-HTML-tag"><a href="#HTML标签-HTML-tag" class="headerlink" title="HTML标签(HTML tag)"></a>HTML标签(HTML tag)</h2><blockquote><p>1.HTML标签是由尖括号包围的关键词，例如<code>&lt;html&gt;</code><br>2.HTML标签成对出现，例如<code>&lt;a&gt;  &lt;/a&gt;</code>前者是开始标签，后者是结束标签 ,也被称为开发标签和闭合标签</p></blockquote><h2 id="HTML文档-网页"><a href="#HTML文档-网页" class="headerlink" title="HTML文档=网页"></a>HTML文档=网页</h2><blockquote><p>1.HTML文档描述网页，即HTML文档=网页<br> 2.HTML文档包含HTML标签和纯文本<br> 3.Web浏览器的作用是读取HTML文档，并以网页的形式呈现出它们.<br>浏览器不会显示HTML标签，而是使用标签来解释页面的内容：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                     </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h2><blockquote><p>HTML标题（heading）是通过<code>&lt;h1&gt;...&lt;h6&gt;</code>等标签进行定义的,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h2><blockquote><p>HTML段落是通过</p><p>标签来定义的,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p2</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h2><blockquote><p>通过<a>标签来定义,如：</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.github.candyvikk.io"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>ps:在href属性中指定链接的地址</em></p><h2 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h2><blockquote><p>通过<img>标签进行定义,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"candyvikk.jpg"</span> <span class="attr">width</span>=<span class="string">"104"</span> <span class="attr">height</span>=<span class="string">"142"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h1><blockquote><p>HTML文档是由HTML元素定义的,我们直接看例子：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>上面的例子包含4个HTML元素</em><br><em><code>&lt;html&gt;</code>元素，元素内容是另一个HTML元素（body元素）—–元素嵌套</em><br><em><code>&lt;body&gt;</code>元素，元素内容是另两个HTML元素（h元素和p元素）</em><br><em>没有内容的HTML元素称为空元素，<code>&lt;br /&gt;</code>就是空元素，也定义换行</em>  </p><h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><blockquote><p>属性可以为HTML元素提供附加的信息<br>HTML标签可以拥有属性，而且属性总在HTML元素的开始标签中规定<br>属性总是以   名称/值  对的形式出现，例如：name=”value”  </p></blockquote><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.github.candyvikk.io"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接的地址在href属性中指定--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题拥有了居中的属性--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>The backgroud color is yellow<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可见网页拥有了黄色的背景颜色--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span>         <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格拥有了关于表格边框的附加信息--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面我们可以知道，属性值应该被包括在双引号（单引号也行）内,<br>但是如果属性值本身就含有双引号的，  那么我们必须使用单引号</p></blockquote><h1 id="HTML标题-1"><a href="#HTML标题-1" class="headerlink" title="HTML标题"></a>HTML标题</h1><blockquote><p>标题（heading）是通过<code>&lt;h1&gt;....&lt;h6&gt;</code>等标签定义的<code>&lt;h1&gt;</code>为最大的标题，<code>&lt;h6&gt;</code>反之,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML水平线  </p></blockquote><figure class="highlight plain"><figcaption><span>/>```标签会在HTML页面创建一条水平线，用来分隔内容,如：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;p&gt;THis is a paragraph&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr &#x2F;&gt;</span><br><span class="line">&lt;p&gt;This is a garagraph&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr &#x2F;&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>HTML注释<br>可以将注释插入HTML代码中,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- THis is a comment --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac上搭建自己的博客(零基础)</title>
      <link href="/2020/04/25/%E5%9C%A8Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E9%9B%B6%E5%9F%BA%E7%A1%80)/"/>
      <url>/2020/04/25/%E5%9C%A8Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E9%9B%B6%E5%9F%BA%E7%A1%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本人昨天刚好搭建好自己的博客，博客是基于hexo框架的.网上有很多教程，但是作为小白的我还是踩了不少坑,<br>  所以想写个教程手把手的演示一下如何搭建自己的博客,希望大家能喜欢，避免踩坑！<br>注意：本教程全程在MacOS下进行，其实win平台的也差不多.  </p></blockquote><h1 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h1><blockquote><p>先在浏览器中搜索Nodejs，不出意外的话第一个就是官方下载网站。进去后选择 <strong>长期支持版</strong>，点击下载.<br>安装很简单，一直点同意就可以了。中间可能要你输入密码或指纹，弄就行了。</p></blockquote><h1 id="查看-node-版本"><a href="#查看-node-版本" class="headerlink" title="查看 node 版本"></a>查看 node 版本</h1><blockquote><p>上述安装完之后，请打开你的终端(win上也叫cmd)，之后的步骤我们都要在终端上完成，开始吧！在进行后面<br>  步骤之前，我们先在终端输入 <em>sudo su</em> ，然后输入你的密码，此时我们就拥有了管理员权限。<br>输入 <em>node -v</em> 查看你的node版本。</p></blockquote><h1 id="查看-npm-版本"><a href="#查看-npm-版本" class="headerlink" title="查看 npm 版本"></a>查看 npm 版本</h1><blockquote><p>输入 <em>npm -v</em> 查看你的npm版本。</p></blockquote><h1 id="安装淘宝的cnpm管理器"><a href="#安装淘宝的cnpm管理器" class="headerlink" title="安装淘宝的cnpm管理器"></a>安装淘宝的cnpm管理器</h1><blockquote><p>因为网络原因，你直接下载hexo框架是很慢的，所以我们这里先安装国内淘宝的镜像源，然后再安装hexo框架<br>输入 <em>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></em> ,此时系统会自动下载  </p></blockquote><h1 id="查看-cnpm-版本"><a href="#查看-cnpm-版本" class="headerlink" title="查看 cnpm 版本"></a>查看 cnpm 版本</h1><blockquote><p>输入 <em>cnpm -v</em> 查看你的cnpm版本。</p></blockquote><h1 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h1><blockquote><p>输入 <em>cnpm install -g hexo-cli</em> 安装hexo框架，耐心等待。</p></blockquote><h1 id="查看-hexo-版本"><a href="#查看-hexo-版本" class="headerlink" title="查看 hexo 版本"></a>查看 hexo 版本</h1><blockquote><p>输入 <em>hexo -v</em> 查看hexo版本。</p></blockquote><h1 id="创建-blog-目录"><a href="#创建-blog-目录" class="headerlink" title="创建 blog 目录"></a>创建 blog 目录</h1><blockquote><p>先输入 <em>pwd</em> 查看自己现在在什么目录，一般是显示在 <em>/Users/xxx/</em> ，此时我们输入 <em>mkdir blog</em> 创建<br>blog目录（当然不一定得是blog这个名字，自己喜欢什么取什么）。</p></blockquote><h1 id="进入-blog-目录"><a href="#进入-blog-目录" class="headerlink" title="进入 blog 目录"></a>进入 blog 目录</h1><blockquote><p>创建好了之后我们输入 <em>cd blog</em> 进入这个文件夹。</p></blockquote><h1 id="生成我们的博客"><a href="#生成我们的博客" class="headerlink" title="生成我们的博客"></a>生成我们的博客</h1><blockquote><p>输入 <em>sudo hexo init</em> 来生成我们的博客，欢呼！此时你去看你前面创建的blog文件夹里会多出很多东西，也就<br>是说我们整个博客都是基于这个blog文件夹操作的，所以过程中如果我们哪步做错了或者不满意，我们大不了把blog<br>文件夹删除，重新开始。</p></blockquote><h1 id="启动本地博客服务"><a href="#启动本地博客服务" class="headerlink" title="启动本地博客服务"></a>启动本地博客服务</h1><blockquote><p>输入 <em>hexo s</em> 来启动。</p></blockquote><h1 id="访问本地博客地址"><a href="#访问本地博客地址" class="headerlink" title="访问本地博客地址"></a>访问本地博客地址</h1><blockquote><p>在上一步完成后，终端会返回一个地址：<em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em>,复制这个地址然后进浏览器粘贴访问，此刻<br>我们将在网页上看到我们的博客主页了。</p></blockquote><h1 id="创建一篇博客文章"><a href="#创建一篇博客文章" class="headerlink" title="创建一篇博客文章"></a>创建一篇博客文章</h1><blockquote><p>经过上一步，我们在终端要按一次<em>ctrl c*来退出，然后输入 *hexo n</em> ，关于怎么写文章可以自学一下markdown<br>语法和vim编辑器或者百度搜索，这里先不细说，或许下次我可以写一篇如何写文章的教程。接下来我们再输入 <em>hexo clean</em><br>，接着输入<em>hexo g</em>，最后输入<em>hexo s</em>。此时你根据上一步的方法重新进入浏览器访问，你讲看到主页上生成了你刚刚创建<br>的文章。</p></blockquote><h1 id="现在你已经成功搭建好一个本地博客网站了"><a href="#现在你已经成功搭建好一个本地博客网站了" class="headerlink" title="现在你已经成功搭建好一个本地博客网站了"></a>现在你已经成功搭建好一个本地博客网站了</h1><blockquote><p>那么我们如何把它部署到远端呢，我这里推荐的是把它部署到你自己的GitHub仓库里，白嫖嘛，就不用买服务器和域名了方便。<br>如何部署到GitHub上其实网上有很多教程，我这里就不详细说了。最后部署成功后就可以在网上看自己的博客了，别人也可以看。<br>那么本期教程到这就结束了，感谢！！！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
