<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>相对OBV指标策略源代码</title>
      <link href="/2020/06/21/%E7%9B%B8%E5%AF%B9OBV%E6%8C%87%E6%A0%87%E7%AD%96%E7%95%A5%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/06/21/%E7%9B%B8%E5%AF%B9OBV%E6%8C%87%E6%A0%87%E7%AD%96%E7%95%A5%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="相对OBV指标策略源代码："><a href="#相对OBV指标策略源代码：" class="headerlink" title="相对OBV指标策略源代码："></a>相对OBV指标策略源代码：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以自己import我们平台支持的第三方python模块，比如pandas、numpy等。</span></span><br><span class="line"><span class="keyword">from</span> vitu <span class="keyword">import</span> ai, api</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta, date</span><br><span class="line"><span class="keyword">import</span> talib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置账户初始持仓信息</span></span><br><span class="line">ai.create_account(name=<span class="string">'111111'</span>, exchange=<span class="string">'binance'</span>, account_type=<span class="string">'digital.spot'</span>,position_base=[&#123;<span class="string">'asset'</span>: <span class="string">'USDT'</span>, <span class="string">'qty'</span>: <span class="number">50000</span>&#125;])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relative_obv</span><span class="params">(obv,n)</span>:</span></span><br><span class="line">min_obv = min(obv[-n:<span class="number">-1</span>])</span><br><span class="line">max_obv = max(obv[-n:<span class="number">-1</span>])</span><br><span class="line">r_volume = (obv[<span class="number">-1</span>] - min_obv)/(max_obv - min_obv)</span><br><span class="line"><span class="keyword">return</span> r_volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这个方法中编写任何的初始化逻辑，context对象将会在你的算法策略的任何方法之间做传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="comment"># 设置这个策略当中会用到的参数，在策略中可以随时调用，这个策略使用长短均线，我们在这里设定长线和短线的区间，在调试寻找最佳区间的时候只需要在这里进行数值改动</span></span><br><span class="line">    context.account = context.get_account(<span class="string">'111111'</span>)</span><br><span class="line">    context.r_volume_data = <span class="number">0</span></span><br><span class="line">    context.type = []</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 你选择的universe crypto的数据更新将会触发此段逻辑，例如日线历史数据或者是实时数据更新    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="comment"># 开始编写你的主要的算法逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取历史数据</span></span><br><span class="line">    h = context.history(<span class="string">'BTC/USDT.binance'</span>, [<span class="string">'close'</span>,<span class="string">'volume'</span>], bars=<span class="number">30</span>, rtype=<span class="string">'dataframe'</span>)</span><br><span class="line">    <span class="comment"># 求obv值</span></span><br><span class="line">    obv = talib.OBV(h[<span class="string">'close'</span>].values,h[<span class="string">'volume'</span>].values)</span><br><span class="line">    r_volume = relative_obv(obv,<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确定买入卖出信号</span></span><br><span class="line">    <span class="keyword">if</span> r_volume &gt; <span class="number">0.5</span>:</span><br><span class="line">        context.r_volume_data = <span class="number">1</span></span><br><span class="line">        context.type.append(context.r_volume_data)</span><br><span class="line">        print(<span class="string">'buy signal'</span>)</span><br><span class="line">    <span class="keyword">elif</span> r_volume &lt; <span class="number">-0.5</span>:</span><br><span class="line">        context.r_volume_data = <span class="number">-1</span></span><br><span class="line">        context.type.append(context.r_volume_data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        context.r_volume_data = <span class="number">0</span></span><br><span class="line">        context.type.append(context.r_volume_data)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 获取当前仓位和价格</span></span><br><span class="line">    position = context.account.get_position(<span class="string">'BTC'</span>)</span><br><span class="line">    current_available = position[<span class="string">'available'</span>]</span><br><span class="line">    current_price = context.get_price(<span class="string">'BTC/USDT.binance'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> context.r_volume_data == <span class="number">1</span>:</span><br><span class="line">      context.account.buy_pct(<span class="string">'BTC/USDT.binance'</span>, current_price, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      context.account.sell_pct(<span class="string">'BTC/USDT.binance'</span>, current_price, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接指定universe，或者通过筛选条件选择universe池</span></span><br><span class="line">universe = ai.create_universe([<span class="string">'BTC/USDT.binance'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置策略参数如：基准、回测数据级别等</span></span><br><span class="line">my_strategy = ai.create_strategy(</span><br><span class="line">    initialize,</span><br><span class="line">    handle_data,</span><br><span class="line">    universe=universe,</span><br><span class="line">    benchmark=<span class="string">'csi5'</span>,</span><br><span class="line">    freq=<span class="string">'d'</span>,</span><br><span class="line">    refresh_rate=<span class="number">1</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置回测参数如：回测日期、手续费率</span></span><br><span class="line">ai.backtest(strategy=my_strategy,</span><br><span class="line">        start=<span class="string">'2018-12-10'</span>,</span><br><span class="line">        end=<span class="string">'2019-08-10'</span>,</span><br><span class="line">        commission=&#123;<span class="string">'taker'</span>: <span class="number">0.0002</span>, <span class="string">'maker'</span>: <span class="number">0.0002</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>购买</title>
      <link href="/2020/06/21/%E8%B4%AD%E4%B9%B0/"/>
      <url>/2020/06/21/%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎购买"><a href="#欢迎购买" class="headerlink" title="欢迎购买"></a>欢迎购买</h1><table><thead><tr><th>Basic_I</th><th>Basic_II</th></tr></thead><tbody><tr><td>100$/year</td><td>78$/year</td></tr><tr><td>200$/3year</td><td>167$/3year</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>市场营销大作业</title>
      <link href="/2020/05/07/%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/05/07/%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>上周时间花了一些时间学了一下HTML，做了一些笔记，还是比较简单的，我的打算是学完HTML后，继续CSS，然后JS，<br>最后看看HTML5和CSS3,在此记录自己的学习过程.</p></blockquote><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><h2 id="什么是HTML？"><a href="#什么是HTML？" class="headerlink" title="什么是HTML？"></a>什么是HTML？</h2><blockquote><p>HTML是用来描述网页的一种语言.<br> 1.超文本标记语言—–Hyper Text Markup Language<br> 2.它不是编程语言，是一种标记语言（markup language)<br> 3.标记语言是一套标记标签（markup tag）<br>4.HTML使用标记标签来描述网</p></blockquote><h2 id="HTML标签-HTML-tag"><a href="#HTML标签-HTML-tag" class="headerlink" title="HTML标签(HTML tag)"></a>HTML标签(HTML tag)</h2><blockquote><p>1.HTML标签是由尖括号包围的关键词，例如<code>&lt;html&gt;</code><br>2.HTML标签成对出现，例如<code>&lt;a&gt;  &lt;/a&gt;</code>前者是开始标签，后者是结束标签 ,也被称为开发标签和闭合标签</p></blockquote><h2 id="HTML文档-网页"><a href="#HTML文档-网页" class="headerlink" title="HTML文档=网页"></a>HTML文档=网页</h2><blockquote><p>1.HTML文档描述网页，即HTML文档=网页<br> 2.HTML文档包含HTML标签和纯文本<br> 3.Web浏览器的作用是读取HTML文档，并以网页的形式呈现出它们.<br>浏览器不会显示HTML标签，而是使用标签来解释页面的内容：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                     </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h2><blockquote><p>HTML标题（heading）是通过<code>&lt;h1&gt;...&lt;h6&gt;</code>等标签进行定义的,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h2><blockquote><p>HTML段落是通过</p><p>标签来定义的,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p2</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h2><blockquote><p>通过<a>标签来定义,如：</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.github.candyvikk.io"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>ps:在href属性中指定链接的地址</em></p><h2 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h2><blockquote><p>通过<img>标签进行定义,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"candyvikk.jpg"</span> <span class="attr">width</span>=<span class="string">"104"</span> <span class="attr">height</span>=<span class="string">"142"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h1><blockquote><p>HTML文档是由HTML元素定义的,我们直接看例子：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>上面的例子包含4个HTML元素</em><br><em><code>&lt;html&gt;</code>元素，元素内容是另一个HTML元素（body元素）—–元素嵌套</em><br><em><code>&lt;body&gt;</code>元素，元素内容是另两个HTML元素（h元素和p元素）</em><br><em>没有内容的HTML元素称为空元素，<code>&lt;br /&gt;</code>就是空元素，也定义换行</em>  </p><h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><blockquote><p>属性可以为HTML元素提供附加的信息<br>HTML标签可以拥有属性，而且属性总在HTML元素的开始标签中规定<br>属性总是以   名称/值  对的形式出现，例如：name=”value”  </p></blockquote><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.github.candyvikk.io"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接的地址在href属性中指定--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题拥有了居中的属性--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>The backgroud color is yellow<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可见网页拥有了黄色的背景颜色--&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span>         <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格拥有了关于表格边框的附加信息--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面我们可以知道，属性值应该被包括在双引号（单引号也行）内,<br>但是如果属性值本身就含有双引号的，  那么我们必须使用单引号</p></blockquote><h1 id="HTML标题-1"><a href="#HTML标题-1" class="headerlink" title="HTML标题"></a>HTML标题</h1><blockquote><p>标题（heading）是通过<code>&lt;h1&gt;....&lt;h6&gt;</code>等标签定义的<code>&lt;h1&gt;</code>为最大的标题，<code>&lt;h6&gt;</code>反之,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML水平线  </p></blockquote><figure class="highlight plain"><figcaption><span>/>```标签会在HTML页面创建一条水平线，用来分隔内容,如：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;p&gt;THis is a paragraph&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr &#x2F;&gt;</span><br><span class="line">&lt;p&gt;This is a garagraph&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr &#x2F;&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>HTML注释<br>可以将注释插入HTML代码中,如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- THis is a comment --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac上搭建自己的博客(零基础)</title>
      <link href="/2020/04/25/%E5%9C%A8Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E9%9B%B6%E5%9F%BA%E7%A1%80)/"/>
      <url>/2020/04/25/%E5%9C%A8Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E9%9B%B6%E5%9F%BA%E7%A1%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本人昨天刚好搭建好自己的博客，博客是基于hexo框架的.网上有很多教程，但是作为小白的我还是踩了不少坑,<br>  所以想写个教程手把手的演示一下如何搭建自己的博客,希望大家能喜欢，避免踩坑！<br>注意：本教程全程在MacOS下进行，其实win平台的也差不多.  </p></blockquote><h1 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h1><blockquote><p>先在浏览器中搜索Nodejs，不出意外的话第一个就是官方下载网站。进去后选择 <strong>长期支持版</strong>，点击下载.<br>安装很简单，一直点同意就可以了。中间可能要你输入密码或指纹，弄就行了。</p></blockquote><h1 id="查看-node-版本"><a href="#查看-node-版本" class="headerlink" title="查看 node 版本"></a>查看 node 版本</h1><blockquote><p>上述安装完之后，请打开你的终端(win上也叫cmd)，之后的步骤我们都要在终端上完成，开始吧！在进行后面<br>  步骤之前，我们先在终端输入 <em>sudo su</em> ，然后输入你的密码，此时我们就拥有了管理员权限。<br>输入 <em>node -v</em> 查看你的node版本。</p></blockquote><h1 id="查看-npm-版本"><a href="#查看-npm-版本" class="headerlink" title="查看 npm 版本"></a>查看 npm 版本</h1><blockquote><p>输入 <em>npm -v</em> 查看你的npm版本。</p></blockquote><h1 id="安装淘宝的cnpm管理器"><a href="#安装淘宝的cnpm管理器" class="headerlink" title="安装淘宝的cnpm管理器"></a>安装淘宝的cnpm管理器</h1><blockquote><p>因为网络原因，你直接下载hexo框架是很慢的，所以我们这里先安装国内淘宝的镜像源，然后再安装hexo框架<br>输入 <em>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></em> ,此时系统会自动下载  </p></blockquote><h1 id="查看-cnpm-版本"><a href="#查看-cnpm-版本" class="headerlink" title="查看 cnpm 版本"></a>查看 cnpm 版本</h1><blockquote><p>输入 <em>cnpm -v</em> 查看你的cnpm版本。</p></blockquote><h1 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h1><blockquote><p>输入 <em>cnpm install -g hexo-cli</em> 安装hexo框架，耐心等待。</p></blockquote><h1 id="查看-hexo-版本"><a href="#查看-hexo-版本" class="headerlink" title="查看 hexo 版本"></a>查看 hexo 版本</h1><blockquote><p>输入 <em>hexo -v</em> 查看hexo版本。</p></blockquote><h1 id="创建-blog-目录"><a href="#创建-blog-目录" class="headerlink" title="创建 blog 目录"></a>创建 blog 目录</h1><blockquote><p>先输入 <em>pwd</em> 查看自己现在在什么目录，一般是显示在 <em>/Users/xxx/</em> ，此时我们输入 <em>mkdir blog</em> 创建<br>blog目录（当然不一定得是blog这个名字，自己喜欢什么取什么）。</p></blockquote><h1 id="进入-blog-目录"><a href="#进入-blog-目录" class="headerlink" title="进入 blog 目录"></a>进入 blog 目录</h1><blockquote><p>创建好了之后我们输入 <em>cd blog</em> 进入这个文件夹。</p></blockquote><h1 id="生成我们的博客"><a href="#生成我们的博客" class="headerlink" title="生成我们的博客"></a>生成我们的博客</h1><blockquote><p>输入 <em>sudo hexo init</em> 来生成我们的博客，欢呼！此时你去看你前面创建的blog文件夹里会多出很多东西，也就<br>是说我们整个博客都是基于这个blog文件夹操作的，所以过程中如果我们哪步做错了或者不满意，我们大不了把blog<br>文件夹删除，重新开始。</p></blockquote><h1 id="启动本地博客服务"><a href="#启动本地博客服务" class="headerlink" title="启动本地博客服务"></a>启动本地博客服务</h1><blockquote><p>输入 <em>hexo s</em> 来启动。</p></blockquote><h1 id="访问本地博客地址"><a href="#访问本地博客地址" class="headerlink" title="访问本地博客地址"></a>访问本地博客地址</h1><blockquote><p>在上一步完成后，终端会返回一个地址：<em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em>,复制这个地址然后进浏览器粘贴访问，此刻<br>我们将在网页上看到我们的博客主页了。</p></blockquote><h1 id="创建一篇博客文章"><a href="#创建一篇博客文章" class="headerlink" title="创建一篇博客文章"></a>创建一篇博客文章</h1><blockquote><p>经过上一步，我们在终端要按一次<em>ctrl c*来退出，然后输入 *hexo n</em> ，关于怎么写文章可以自学一下markdown<br>语法和vim编辑器或者百度搜索，这里先不细说，或许下次我可以写一篇如何写文章的教程。接下来我们再输入 <em>hexo clean</em><br>，接着输入<em>hexo g</em>，最后输入<em>hexo s</em>。此时你根据上一步的方法重新进入浏览器访问，你讲看到主页上生成了你刚刚创建<br>的文章。</p></blockquote><h1 id="现在你已经成功搭建好一个本地博客网站了"><a href="#现在你已经成功搭建好一个本地博客网站了" class="headerlink" title="现在你已经成功搭建好一个本地博客网站了"></a>现在你已经成功搭建好一个本地博客网站了</h1><blockquote><p>那么我们如何把它部署到远端呢，我这里推荐的是把它部署到你自己的GitHub仓库里，白嫖嘛，就不用买服务器和域名了方便。<br>如何部署到GitHub上其实网上有很多教程，我这里就不详细说了。最后部署成功后就可以在网上看自己的博客了，别人也可以看。<br>那么本期教程到这就结束了，感谢！！！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
